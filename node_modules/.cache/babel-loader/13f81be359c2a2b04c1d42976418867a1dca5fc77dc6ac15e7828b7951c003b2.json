{"ast":null,"code":"// /src/api/googleAPI.js\n/* global gapi, google  */\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst DISCOVERY_DOCS = [process.env.REACT_APP_DISCOVERY_DOCS];\nconst SCOPES = process.env.REACT_APP_SCOPES;\nconst userInfoEndpoint = process.env.REACT_APP_USER_INFO_ENDPOINT;\nlet tokenClient;\nexport function initGoogleAPI() {\n  return new Promise((resolve, reject) => {\n    gapi.load('client', () => {\n      gapi.client.init({\n        apiKey: API_KEY,\n        discoveryDocs: DISCOVERY_DOCS\n      }).then(() => {\n        tokenClient = google.accounts.oauth2.initTokenClient({\n          client_id: CLIENT_ID,\n          scope: SCOPES,\n          prompt: ''\n        });\n        resolve();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  });\n}\nexport function logout() {\n  return new Promise(resolve => {\n    google.accounts.id.disableAutoSelect();\n    resolve({\n      access_token: '',\n      expires_in: 0\n    });\n  });\n}\nexport function login() {\n  return new Promise((resolve, reject) => {\n    tokenClient.callback = resp => {\n      if (resp.error) {\n        reject(`Login failed: ${resp.error}`);\n        return;\n      }\n      fetch(userInfoEndpoint, {\n        headers: {\n          Authorization: `Bearer ${resp.access_token}`\n        }\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch user info');\n        }\n        return response.json();\n      }).then(userInfo => resolve({\n        token: resp,\n        userInfo\n      })).catch(error => reject(`Error during user info retrieval: ${error.message}`));\n    };\n    tokenClient.requestAccessToken({\n      prompt: 'select_account'\n    });\n  });\n}","map":{"version":3,"names":["CLIENT_ID","process","env","REACT_APP_CLIENT_ID","API_KEY","REACT_APP_API_KEY","DISCOVERY_DOCS","REACT_APP_DISCOVERY_DOCS","SCOPES","REACT_APP_SCOPES","userInfoEndpoint","REACT_APP_USER_INFO_ENDPOINT","tokenClient","initGoogleAPI","Promise","resolve","reject","gapi","load","client","init","apiKey","discoveryDocs","then","google","accounts","oauth2","initTokenClient","client_id","scope","prompt","catch","error","logout","id","disableAutoSelect","access_token","expires_in","login","callback","resp","fetch","headers","Authorization","response","ok","Error","json","userInfo","token","message","requestAccessToken"],"sources":["D:/xampp/htdocs/src/apis/googleAPI.js"],"sourcesContent":["// /src/api/googleAPI.js\r\n/* global gapi, google  */\r\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nconst DISCOVERY_DOCS = [process.env.REACT_APP_DISCOVERY_DOCS];\r\nconst SCOPES = process.env.REACT_APP_SCOPES;\r\nconst userInfoEndpoint = process.env.REACT_APP_USER_INFO_ENDPOINT;\r\n\r\nlet tokenClient;\r\n\r\nexport function initGoogleAPI() {\r\n  return new Promise((resolve, reject) => {\r\n    gapi.load('client', () => {\r\n      gapi.client.init({\r\n        apiKey: API_KEY,\r\n        discoveryDocs: DISCOVERY_DOCS,\r\n      })\r\n      .then(() => {\r\n        tokenClient = google.accounts.oauth2.initTokenClient({\r\n          client_id: CLIENT_ID,\r\n          scope: SCOPES,\r\n          prompt: '',\r\n        });\r\n        resolve();\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nexport function logout() {\r\n  return new Promise((resolve) => {\r\n    google.accounts.id.disableAutoSelect();\r\n    resolve({ access_token: '', expires_in: 0 });\r\n  });\r\n}\r\n\r\nexport function login() {\r\n  return new Promise((resolve, reject) => {\r\n    tokenClient.callback = (resp) => {\r\n      if (resp.error) {\r\n        reject(`Login failed: ${resp.error}`);\r\n        return;\r\n      }\r\n      fetch(userInfoEndpoint, {\r\n        headers: { Authorization: `Bearer ${resp.access_token}` }\r\n      })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch user info');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(userInfo => resolve({ token: resp, userInfo }))\r\n      .catch(error => reject(`Error during user info retrieval: ${error.message}`));\r\n    };\r\n    tokenClient.requestAccessToken({ prompt: 'select_account' });\r\n  });\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB;AACjD,MAAMC,OAAO,GAAGH,OAAO,CAACC,GAAG,CAACG,iBAAiB;AAC7C,MAAMC,cAAc,GAAG,CAACL,OAAO,CAACC,GAAG,CAACK,wBAAwB,CAAC;AAC7D,MAAMC,MAAM,GAAGP,OAAO,CAACC,GAAG,CAACO,gBAAgB;AAC3C,MAAMC,gBAAgB,GAAGT,OAAO,CAACC,GAAG,CAACS,4BAA4B;AAEjE,IAAIC,WAAW;AAEf,OAAO,SAASC,aAAaA,CAAA,EAAG;EAC9B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,IAAI,CAACC,IAAI,CAAC,QAAQ,EAAE,MAAM;MACxBD,IAAI,CAACE,MAAM,CAACC,IAAI,CAAC;QACfC,MAAM,EAAEjB,OAAO;QACfkB,aAAa,EAAEhB;MACjB,CAAC,CAAC,CACDiB,IAAI,CAAC,MAAM;QACVX,WAAW,GAAGY,MAAM,CAACC,QAAQ,CAACC,MAAM,CAACC,eAAe,CAAC;UACnDC,SAAS,EAAE5B,SAAS;UACpB6B,KAAK,EAAErB,MAAM;UACbsB,MAAM,EAAE;QACV,CAAC,CAAC;QACFf,OAAO,CAAC,CAAC;MACX,CAAC,CAAC,CACDgB,KAAK,CAACC,KAAK,IAAI;QACdhB,MAAM,CAACgB,KAAK,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,OAAO,SAASC,MAAMA,CAAA,EAAG;EACvB,OAAO,IAAInB,OAAO,CAAEC,OAAO,IAAK;IAC9BS,MAAM,CAACC,QAAQ,CAACS,EAAE,CAACC,iBAAiB,CAAC,CAAC;IACtCpB,OAAO,CAAC;MAAEqB,YAAY,EAAE,EAAE;MAAEC,UAAU,EAAE;IAAE,CAAC,CAAC;EAC9C,CAAC,CAAC;AACJ;AAEA,OAAO,SAASC,KAAKA,CAAA,EAAG;EACtB,OAAO,IAAIxB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCJ,WAAW,CAAC2B,QAAQ,GAAIC,IAAI,IAAK;MAC/B,IAAIA,IAAI,CAACR,KAAK,EAAE;QACdhB,MAAM,CAAE,iBAAgBwB,IAAI,CAACR,KAAM,EAAC,CAAC;QACrC;MACF;MACAS,KAAK,CAAC/B,gBAAgB,EAAE;QACtBgC,OAAO,EAAE;UAAEC,aAAa,EAAG,UAASH,IAAI,CAACJ,YAAa;QAAE;MAC1D,CAAC,CAAC,CACDb,IAAI,CAACqB,QAAQ,IAAI;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDxB,IAAI,CAACyB,QAAQ,IAAIjC,OAAO,CAAC;QAAEkC,KAAK,EAAET,IAAI;QAAEQ;MAAS,CAAC,CAAC,CAAC,CACpDjB,KAAK,CAACC,KAAK,IAAIhB,MAAM,CAAE,qCAAoCgB,KAAK,CAACkB,OAAQ,EAAC,CAAC,CAAC;IAC/E,CAAC;IACDtC,WAAW,CAACuC,kBAAkB,CAAC;MAAErB,MAAM,EAAE;IAAiB,CAAC,CAAC;EAC9D,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}