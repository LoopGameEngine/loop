{"ast":null,"code":"// /src/api/googleAPI.js\n/* global gapi, google  */\n\n//const userInfoEndpoint = 'https://www.googleapis.com/oauth2/v1/userinfo';\n\nlet tokenClient;\nexport async function initGoogleAPI(CLIENT_ID, API_KEY, DISCOVERY_DOCS, SCOPES) {\n  try {\n    await new Promise((resolve, reject) => {\n      gapi.load('client', () => {\n        gapi.client.init({\n          apiKey: API_KEY,\n          discoveryDocs: DISCOVERY_DOCS\n        }).then(resolve).catch(reject);\n      });\n    });\n    tokenClient = google.accounts.oauth2.initTokenClient({\n      client_id: CLIENT_ID,\n      scope: SCOPES,\n      prompt: ''\n    });\n    return {\n      error: null\n    };\n  } catch (error) {\n    console.error(`Google API initialization failed: ${error.message}`);\n    return {\n      error\n    };\n  }\n}\nexport async function login() {\n  try {\n    const token = await new Promise((resolve, reject) => {\n      tokenClient.callback = response => {\n        if (response.error) {\n          reject(`Login failed: ${response.error}`);\n        } else {\n          resolve(response);\n        }\n      };\n      tokenClient.requestAccessToken({\n        prompt: 'select_account'\n      });\n    });\n    return {\n      data: token,\n      error: null\n    };\n  } catch (error) {\n    console.error(`Error during login or user info retrieval: ${error.message}`);\n    return {\n      error\n    };\n  }\n}\nexport async function logout() {\n  try {\n    google.accounts.id.disableAutoSelect();\n    return {\n      data: true,\n      error: null\n    };\n  } catch (error) {\n    console.error(`Error during logout: ${error.message}`);\n    return {\n      data: null,\n      error: null\n    };\n  }\n}\nexport async function getUserInfo() {\n  console.log(gapi.client);\n  try {\n    // Asegúrate de que el endpoint de userinfo está incluido en tus documentos de descubrimiento.\n    const response = await gapi.client.people.people.get({\n      resourceName: 'people/me',\n      personFields: 'emailAddresses,names'\n    });\n    if (response.error) {\n      // Esto manejará específicamente errores relacionados con la API, incluidos los de autenticación.\n      console.error('Error during user info retrieval:', response.error.message);\n      return {\n        data: null,\n        error: response.error\n      };\n    }\n    // Retorna los datos de usuario directamente obtenidos de la respuesta de `gapi.client`.\n    return {\n      data: response.result,\n      error: null\n    };\n  } catch (error) {\n    console.error(`Error during user info retrieval: ${error.message}`);\n    return {\n      data: null,\n      error\n    };\n  }\n}","map":{"version":3,"names":["tokenClient","initGoogleAPI","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","Promise","resolve","reject","gapi","load","client","init","apiKey","discoveryDocs","then","catch","google","accounts","oauth2","initTokenClient","client_id","scope","prompt","error","console","message","login","token","callback","response","requestAccessToken","data","logout","id","disableAutoSelect","getUserInfo","log","people","get","resourceName","personFields","result"],"sources":["D:/xampp/htdocs/src/apis/googleAPI.js"],"sourcesContent":["// /src/api/googleAPI.js\r\n/* global gapi, google  */\r\n\r\n//const userInfoEndpoint = 'https://www.googleapis.com/oauth2/v1/userinfo';\r\n\r\nlet tokenClient;\r\n\r\nexport async function initGoogleAPI(CLIENT_ID, API_KEY, DISCOVERY_DOCS, SCOPES) {\r\n  try {\r\n    await new Promise((resolve, reject) => {\r\n      gapi.load('client', () => {\r\n        gapi.client.init({\r\n          apiKey: API_KEY,\r\n          discoveryDocs: DISCOVERY_DOCS,\r\n        }).then(resolve).catch(reject);\r\n      });\r\n    });\r\n    tokenClient = google.accounts.oauth2.initTokenClient({\r\n      client_id: CLIENT_ID,\r\n      scope: SCOPES,\r\n      prompt: '',\r\n    });\r\n    return { error: null };\r\n  } catch (error) {\r\n    console.error(`Google API initialization failed: ${error.message}`);\r\n    return { error };\r\n  }\r\n}\r\n\r\nexport async function login() {\r\n  try {\r\n    const token = await new Promise((resolve, reject) => {\r\n      tokenClient.callback = (response) => {\r\n        if (response.error) {\r\n          reject(`Login failed: ${response.error}`);\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      };\r\n      tokenClient.requestAccessToken({ prompt: 'select_account' });\r\n    });\r\n    return { data: token, error: null };\r\n  } catch (error) {\r\n    console.error(`Error during login or user info retrieval: ${error.message}`);\r\n    return { error };\r\n  }\r\n}\r\n\r\nexport async function logout() {\r\n  try {\r\n    google.accounts.id.disableAutoSelect();\r\n    return { data: true, error: null };\r\n  } catch (error) {\r\n    console.error(`Error during logout: ${error.message}`);\r\n    return { data: null, error: null };\r\n  }\r\n}\r\n\r\n\r\nexport async function getUserInfo() {\r\n  console.log(gapi.client);\r\n  try {\r\n    // Asegúrate de que el endpoint de userinfo está incluido en tus documentos de descubrimiento.\r\n    const response = await gapi.client.people.people.get({\r\n      resourceName: 'people/me',\r\n      personFields: 'emailAddresses,names',\r\n    });\r\n    if (response.error) {\r\n      // Esto manejará específicamente errores relacionados con la API, incluidos los de autenticación.\r\n      console.error('Error during user info retrieval:', response.error.message);\r\n      return { data: null, error: response.error };\r\n    }\r\n    // Retorna los datos de usuario directamente obtenidos de la respuesta de `gapi.client`.\r\n    return { data: response.result, error: null };\r\n  } catch (error) {\r\n    console.error(`Error during user info retrieval: ${error.message}`);\r\n    return { data: null, error };\r\n  }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}