{"ast":null,"code":"//driverAPI.js\n/* global gapi */\n\nlet accessToken;\nvar openWindows = {};\nvar expandContainer = document.querySelector('.expand-container');\nvar expandContainerUl = document.querySelector('.expand-container ul');\nfunction setDriveAccessToken(token) {\n  accessToken = token;\n}\nfunction checkDriveFolder(loopGamesFolder) {\n  return new Promise(function (resolve, reject) {\n    gapi.client.drive.files.list({\n      q: \"name ='\" + loopGamesFolder + \"' and trashed=false\",\n      fields: 'files(id,name,owners(displayName))'\n    }).then(function (response) {\n      var files = response.result.files;\n      if (files && files.length > 0) {\n        resolve(files[0].id);\n      } else {\n        createFolder(loopGamesFolder, 'root', accessToken).then(function (folderId) {\n          resolve(folderId);\n        }).catch(function (error) {\n          reject(new Error('Failed to create folder: ' + error.message));\n        });\n      }\n    }).catch(function (error) {\n      reject(new Error('Failed to list files: ' + error.message));\n    });\n  });\n}\nfunction listDriveGames(appFolderID) {\n  return new Promise((resolve, reject) => {\n    if (appFolderID) {\n      gapi.client.drive.files.list({\n        'q': `parents in \"${appFolderID}\"`,\n        // Listar juegos del usuario\n        'fields': 'files(id, name)'\n      }).then(async response => {\n        const files = response.result.files;\n        for (let i = files.length - 1; i >= 0; i--) {\n          const gameFolderID = files[i].id;\n          try {\n            files[i].imageUrl = await getImageDownloadUrl(gameFolderID);\n          } catch (error) {\n            console.error(error.message);\n          }\n        }\n        resolve(files);\n      }).catch(error => {\n        reject(new Error('Error al listar los juegos de Google Drive: ' + error.message));\n      });\n    }\n  });\n}\nfunction getImageDownloadUrl(gameFolderID) {\n  return new Promise((resolve, reject) => {\n    // Buscar el archivo de la imagen por nombre en el directorio del juego\n    gapi.client.drive.files.list({\n      'q': `name='image.jpg' and '${gameFolderID}' in parents`,\n      'fields': 'files(id)'\n    }).then(response => {\n      const files = response.result.files;\n      if (files && files.length > 0) {\n        const imageFileId = files[0].id;\n        return gapi.client.drive.files.get({\n          'fileId': imageFileId,\n          'alt': 'media'\n        });\n      } else {\n        reject(new Error('No se encontró el archivo de imagen en el directorio del juego.'));\n      }\n    }).then(res => {\n      const type = res.headers[\"Content-Type\"];\n      const blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\n      const objectUrl = URL.createObjectURL(blob, {\n        type\n      });\n      resolve(objectUrl);\n    }).catch(error => {\n      reject(new Error('Error obteniendo la URL de descarga de la imagen: ' + error.message));\n    });\n  });\n}\nasync function newGame(appFolderID) {\n  var gameID;\n  return new Promise((resolve, reject) => {\n    createFolder(\"Untitled Game\", appFolderID).then(function (folderId) {\n      gameID = folderId;\n      return createEmptyJson(gameID);\n    }).then(function () {\n      return createEmptyImage(gameID); // Agregado: llama a createEmptyImage\n    }).then(function () {\n      return createFolder(\"images\", gameID);\n    }).then(function () {\n      return createFolder(\"sounds\", gameID);\n    }).then(function () {\n      resolve(gameID);\n    }).catch(function (error) {\n      console.error(\"Failed to create game:\", error);\n      reject(error);\n    });\n  });\n}\nfunction editGame(menuItemHTML) {\n  var gameID = menuItemHTML.parentNode.getAttribute(\"gameid\");\n  var url = \"editor/?id=\" + gameID;\n  if (openWindows[url] && !openWindows[url].closed) openWindows[url].focus();else openWindows[url] = window.open(url, \"_blank\");\n  expandContainer.style.display = 'none';\n  expandContainerUl.setAttribute('gameid', '');\n}\nfunction playGame(menuItemHTML) {\n  var gameID = menuItemHTML.parentNode.getAttribute(\"gameid\");\n  var url = \"engine/?id=\" + gameID;\n  if (openWindows[url] && !openWindows[url].closed) openWindows[url].focus();else openWindows[url] = window.open(url, \"_blank\");\n  expandContainer.style.display = 'none';\n  expandContainerUl.setAttribute('gameid', '');\n}\nasync function duplicateGame(gameID) {\n  return new Promise((resolve, reject) => {\n    gapi.client.drive.files.get({\n      'fileId': gameID,\n      'fields': 'name, parents'\n    }).then(response => {\n      console.log('Game Folder Retrieved');\n      const duplicateFolderName = response.result.name + ' - Copy';\n      gapi.client.drive.files.create({\n        'resource': {\n          'name': duplicateFolderName,\n          'mimeType': 'application/vnd.google-apps.folder',\n          'parents': response.result.parents\n        }\n      }).then(res => {\n        const newDirectoryId = res.result.id;\n        copyDirectoryContents(gameID, newDirectoryId, duplicateFolderName).then(() => {\n          resolve();\n        }).catch(error => {\n          reject(new Error('Error copying directory contents: ' + error.message));\n        });\n      }).catch(error => {\n        reject(new Error('Error creating duplicated game folder: ' + error.message));\n      });\n    }).catch(error => {\n      reject(new Error('Error retrieving game folder: ' + error.message));\n    });\n  });\n}\nasync function deleteGame(gameID, gameName) {\n  var result = window.confirm(`Do you want to delete the \"${gameName}\" game?`);\n  if (result) {\n    try {\n      await gapi.client.drive.files.delete({\n        'fileId': gameID\n      });\n      console.log('File Deleted');\n    } catch (error) {\n      console.error('Error deleting game:', error.message);\n    }\n  } else {\n    console.log('Option selected: false');\n  }\n}\nasync function copyDirectoryContents(sourceDirectoryId, destinationDirectoryId, duplicateFolderName) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await gapi.client.drive.files.list({\n        'q': \"'\" + sourceDirectoryId + \"' in parents\",\n        'fields': 'files(id, name, mimeType)'\n      });\n      const files = response.result.files;\n      const copyFilePromises = files.map(async file => {\n        if (file.mimeType === 'application/vnd.google-apps.folder') {\n          await duplicateSubdirectory(file.id, destinationDirectoryId);\n        } else {\n          const copyRes = await gapi.client.drive.files.copy({\n            'fileId': file.id,\n            'parents': [destinationDirectoryId]\n          });\n          console.log('File Copied: ' + copyRes.result.name);\n          if (copyRes.result.name === \"game.json\") {\n            const originalGameJsonId = await getJson(sourceDirectoryId);\n            console.log('ID del archivo game.json:', originalGameJsonId);\n            await changeNameInJson(copyRes.result.id, originalGameJsonId, duplicateFolderName);\n          }\n        }\n      });\n      await Promise.all(copyFilePromises);\n      resolve();\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nfunction getJson(directoryId) {\n  var request = gapi.client.drive.files.list({\n    'q': \"name='game.json' and '\" + directoryId + \"' in parents\",\n    'fields': 'files(id)'\n  });\n  return new Promise(function (resolve, reject) {\n    request.execute(function (res) {\n      if (res.files.length > 0) {\n        var gameJsonId = res.files[0].id;\n        resolve(gameJsonId);\n      } else {\n        reject(new Error('No se encontró el archivo game.json en la carpeta original.'));\n      }\n    });\n  });\n}\nfunction changeNameInJson(duplicatedDirectoryId, originalGameJsonId, newName) {\n  var request = gapi.client.drive.files.get({\n    'fileId': originalGameJsonId,\n    'alt': 'media'\n  });\n  request.execute(function (res) {\n    var gameJsonContent = res;\n    gameJsonContent.name = newName;\n    var updatedJsonString = JSON.stringify(gameJsonContent);\n    var updateRequest = gapi.client.request({\n      'path': '/upload/drive/v3/files/' + duplicatedDirectoryId,\n      'method': 'PATCH',\n      'params': {\n        'uploadType': 'media'\n      },\n      'headers': {\n        'Content-Type': 'application/json'\n      },\n      'body': updatedJsonString\n    });\n    updateRequest.execute(function (updateRes) {\n      console.log('Nombre del juego duplicado actualizado: ' + newName);\n    });\n  });\n}\nfunction duplicateSubdirectory(sourceSubdirectoryId, destinationParentId) {\n  var request = gapi.client.drive.files.get({\n    'fileId': sourceSubdirectoryId,\n    'fields': 'name, parents'\n  });\n  request.execute(function (res) {\n    console.log('Subdirectory Retrieved');\n    var subdirectoryData = res;\n    var copyRequest = gapi.client.drive.files.create({\n      'resource': {\n        'name': subdirectoryData.name,\n        'mimeType': 'application/vnd.google-apps.folder',\n        'parents': [destinationParentId]\n      }\n    });\n    copyRequest.execute(function (copyRes) {\n      console.log('Subdirectory Duplicated');\n      var duplicatedSubdirectoryId = copyRes.id;\n      copyDirectoryContents(sourceSubdirectoryId, duplicatedSubdirectoryId);\n    });\n  });\n}\nfunction createFolder(folderName, parent) {\n  console.log(\"createFolder \", folderName, parent);\n  return new Promise(function (resolve, reject) {\n    var request = gapi.client.request({\n      path: '/drive/v3/files',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + accessToken\n      },\n      body: {\n        'name': folderName,\n        'mimeType': 'application/vnd.google-apps.folder',\n        'parents': [parent]\n      }\n    });\n    request.execute(function (response) {\n      if (response.error) {\n        reject(new Error('Failed to create folder: ' + response.error.message));\n      } else if (response.id) {\n        resolve(response.id);\n      } else {\n        reject(new Error('Failed to create folder.'));\n      }\n    });\n  });\n}\n// Exporta las funciones necesarias si es necesario\nfunction createEmptyJson(gameID) {\n  return new Promise(function (resolve, reject) {\n    var request = gapi.client.request({\n      path: '/drive/v3/files',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + accessToken\n      },\n      body: {\n        'name': 'game.json',\n        'mimeType': 'application/json',\n        'parents': [gameID]\n      }\n    });\n    request.execute(function (response) {\n      if (response.error) {\n        reject(new Error('Failed to create JSON file: ' + response.error.message));\n      } else if (response.id) {\n        resolve(response.id);\n      } else {\n        reject(new Error('Failed to create JSON file.'));\n      }\n    });\n  });\n}\nfunction createEmptyImage(gameID) {\n  return new Promise(function (resolve, reject) {\n    var metadata = {\n      'name': 'image.jpg',\n      'parents': [gameID]\n    };\n    // Crear una imagen en blanco de 1x1 píxeles\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    var context = canvas.getContext('2d');\n    context.fillStyle = '#ffffff'; // Color blanco\n    context.fillRect(0, 0, 1, 1);\n    canvas.toBlob(function (blob) {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        var base64Data = reader.result.split(',')[1];\n        var boundary = '-------314159265358979323846';\n        var delimiter = '\\r\\n--' + boundary + '\\r\\n';\n        var close_delim = '\\r\\n--' + boundary + '--';\n        var multipartRequestBody = delimiter + 'Content-Type: application/json\\r\\n\\r\\n' + JSON.stringify(metadata) + delimiter + 'Content-Type: image/jpeg\\r\\n' + 'Content-Transfer-Encoding: base64\\r\\n' + '\\r\\n' + base64Data + close_delim;\n        gapi.client.request({\n          path: '/upload/drive/v3/files',\n          method: 'POST',\n          params: {\n            'uploadType': 'multipart'\n          },\n          headers: {\n            'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"',\n            'Authorization': 'Bearer ' + accessToken\n          },\n          body: multipartRequestBody\n        }).then(function (response) {\n          var fileId = response.result.id;\n          resolve(fileId);\n        }).catch(function (error) {\n          reject(new Error('Failed to create image file: ' + error.result.error.message));\n        });\n      };\n      reader.readAsDataURL(blob);\n    }, 'image/jpeg');\n  });\n}\nexport { setDriveAccessToken, checkDriveFolder, listDriveGames, newGame, editGame, playGame, deleteGame, duplicateGame };","map":{"version":3,"names":["accessToken","openWindows","expandContainer","document","querySelector","expandContainerUl","setDriveAccessToken","token","checkDriveFolder","loopGamesFolder","Promise","resolve","reject","gapi","client","drive","files","list","q","fields","then","response","result","length","id","createFolder","folderId","catch","error","Error","message","listDriveGames","appFolderID","i","gameFolderID","imageUrl","getImageDownloadUrl","console","imageFileId","get","res","type","headers","blob","Blob","Uint8Array","body","map","_","charCodeAt","objectUrl","URL","createObjectURL","newGame","gameID","createEmptyJson","createEmptyImage","editGame","menuItemHTML","parentNode","getAttribute","url","closed","focus","window","open","style","display","setAttribute","playGame","duplicateGame","log","duplicateFolderName","name","create","parents","newDirectoryId","copyDirectoryContents","deleteGame","gameName","confirm","delete","sourceDirectoryId","destinationDirectoryId","copyFilePromises","file","mimeType","duplicateSubdirectory","copyRes","copy","originalGameJsonId","getJson","changeNameInJson","all","directoryId","request","execute","gameJsonId","duplicatedDirectoryId","newName","gameJsonContent","updatedJsonString","JSON","stringify","updateRequest","updateRes","sourceSubdirectoryId","destinationParentId","subdirectoryData","copyRequest","duplicatedSubdirectoryId","folderName","parent","path","method","metadata","canvas","createElement","width","height","context","getContext","fillStyle","fillRect","toBlob","reader","FileReader","onloadend","base64Data","split","boundary","delimiter","close_delim","multipartRequestBody","params","fileId","readAsDataURL"],"sources":["D:/xampp/htdocs/app/src/driveAPI.js"],"sourcesContent":["\r\n//driverAPI.js\r\n/* global gapi */\r\n\r\nlet accessToken;\r\nvar openWindows = {};\r\nvar expandContainer = document.querySelector('.expand-container');\r\nvar expandContainerUl = document.querySelector('.expand-container ul');\r\n\r\nfunction setDriveAccessToken(token) {\r\n  accessToken = token;\r\n}\r\n\r\nfunction checkDriveFolder(loopGamesFolder) {\r\n  return new Promise(function (resolve, reject) {\r\n    gapi.client.drive.files.list({\r\n      q: \"name ='\" + loopGamesFolder + \"' and trashed=false\",\r\n      fields: 'files(id,name,owners(displayName))'\r\n    }).then(function (response) {\r\n      var files = response.result.files;\r\n      if (files && files.length > 0) {\r\n        resolve(files[0].id);\r\n      } else {\r\n        createFolder(loopGamesFolder, 'root', accessToken).then(function (folderId) {\r\n          resolve(folderId);\r\n        }).catch(function (error) {\r\n          reject(new Error('Failed to create folder: ' + error.message));\r\n        });\r\n      }\r\n    }).catch(function (error) {\r\n      reject(new Error('Failed to list files: ' + error.message));\r\n    });\r\n  });\r\n}\r\n\r\nfunction listDriveGames(appFolderID) {\r\n  return new Promise((resolve, reject) => {\r\n    if (appFolderID) {\r\n      gapi.client.drive.files.list({\r\n        'q': `parents in \"${appFolderID}\"`, // Listar juegos del usuario\r\n        'fields': 'files(id, name)',\r\n      }).then(async response => {\r\n        const files = response.result.files;\r\n        for (let i = files.length - 1; i >= 0; i--) {\r\n          const gameFolderID = files[i].id;\r\n          try {\r\n            files[i].imageUrl = await getImageDownloadUrl(gameFolderID);\r\n          } catch (error) {\r\n            console.error(error.message);\r\n          }\r\n        }\r\n        resolve(files);\r\n      }).catch(error => {\r\n        reject(new Error('Error al listar los juegos de Google Drive: ' + error.message));\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nfunction getImageDownloadUrl(gameFolderID) {\r\n  return new Promise((resolve, reject) => {\r\n    // Buscar el archivo de la imagen por nombre en el directorio del juego\r\n    gapi.client.drive.files.list({\r\n      'q': `name='image.jpg' and '${gameFolderID}' in parents`,\r\n      'fields': 'files(id)',\r\n    }).then(response => {\r\n      const files = response.result.files;\r\n      if (files && files.length > 0) {\r\n        const imageFileId = files[0].id;\r\n        return gapi.client.drive.files.get({\r\n          'fileId': imageFileId,\r\n          'alt': 'media',\r\n        });\r\n      } else {\r\n        reject(new Error('No se encontró el archivo de imagen en el directorio del juego.'));\r\n      }\r\n    }).then(res => {\r\n      const type = res.headers[\"Content-Type\"];\r\n      const blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\r\n      const objectUrl = URL.createObjectURL(blob, { type });\r\n      resolve(objectUrl);\r\n    }).catch(error => {\r\n      reject(new Error('Error obteniendo la URL de descarga de la imagen: ' + error.message));\r\n    });\r\n  });\r\n}\r\n\r\nasync function newGame(appFolderID) {\r\n  var gameID;\r\n  return new Promise((resolve, reject) => {\r\n    createFolder(\"Untitled Game\", appFolderID)\r\n      .then(function (folderId) {\r\n        gameID = folderId;\r\n        return createEmptyJson(gameID);\r\n      })\r\n      .then(function () {\r\n        return createEmptyImage(gameID);  // Agregado: llama a createEmptyImage\r\n      })\r\n      .then(function () {\r\n        return createFolder(\"images\", gameID);\r\n      })\r\n      .then(function () {\r\n        return createFolder(\"sounds\", gameID);\r\n      })\r\n      .then(function () {\r\n        resolve(gameID);\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Failed to create game:\", error);\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nfunction editGame(menuItemHTML) {\r\n  var gameID = menuItemHTML.parentNode.getAttribute(\"gameid\");\r\n  var url = \"editor/?id=\" + gameID;\r\n  if (openWindows[url] && !openWindows[url].closed) openWindows[url].focus();\r\n  else openWindows[url] = window.open(url, \"_blank\");\r\n  expandContainer.style.display = 'none';\r\n  expandContainerUl.setAttribute('gameid', '');\r\n}\r\n\r\nfunction playGame(menuItemHTML) {\r\n  var gameID = menuItemHTML.parentNode.getAttribute(\"gameid\");\r\n  var url = \"engine/?id=\" + gameID;\r\n  if (openWindows[url] && !openWindows[url].closed) openWindows[url].focus();\r\n  else openWindows[url] = window.open(url, \"_blank\");\r\n  expandContainer.style.display = 'none';\r\n  expandContainerUl.setAttribute('gameid', '');\r\n}\r\n\r\nasync function duplicateGame(gameID) {\r\n\r\n  return new Promise((resolve, reject) => {\r\n    gapi.client.drive.files.get({\r\n      'fileId': gameID,\r\n      'fields': 'name, parents'\r\n    }).then(response => {\r\n      console.log('Game Folder Retrieved');\r\n      const duplicateFolderName = response.result.name + ' - Copy';\r\n      gapi.client.drive.files.create({\r\n        'resource': {\r\n          'name': duplicateFolderName,\r\n          'mimeType': 'application/vnd.google-apps.folder',\r\n          'parents': response.result.parents\r\n        }\r\n      }).then(res => {\r\n\r\n        const newDirectoryId = res.result.id;\r\n\r\n        copyDirectoryContents(gameID, newDirectoryId, duplicateFolderName).then(() => {\r\n          resolve();\r\n        }).catch(error => {\r\n          reject(new Error('Error copying directory contents: ' + error.message));\r\n        });\r\n      }).catch(error => {\r\n        reject(new Error('Error creating duplicated game folder: ' + error.message));\r\n      });\r\n    }).catch(error => {\r\n      reject(new Error('Error retrieving game folder: ' + error.message));\r\n    });\r\n  });\r\n}\r\n\r\n\r\nasync function deleteGame(gameID, gameName) {\r\n  var result = window.confirm(`Do you want to delete the \"${gameName}\" game?`);\r\n  if (result) {\r\n    try {\r\n      await gapi.client.drive.files.delete({\r\n        'fileId': gameID\r\n      });\r\n      console.log('File Deleted');\r\n    } catch (error) {\r\n      console.error('Error deleting game:', error.message);\r\n    }\r\n  } else {\r\n    console.log('Option selected: false');\r\n  }\r\n}\r\n\r\nasync function copyDirectoryContents(sourceDirectoryId, destinationDirectoryId, duplicateFolderName) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const response = await gapi.client.drive.files.list({\r\n        'q': \"'\" + sourceDirectoryId + \"' in parents\",\r\n        'fields': 'files(id, name, mimeType)'\r\n      });\r\n\r\n      const files = response.result.files;\r\n\r\n      const copyFilePromises = files.map(async (file) => {\r\n        if (file.mimeType === 'application/vnd.google-apps.folder') {\r\n          await duplicateSubdirectory(file.id, destinationDirectoryId);\r\n        } else {\r\n          const copyRes = await gapi.client.drive.files.copy({\r\n            'fileId': file.id,\r\n            'parents': [destinationDirectoryId]\r\n          });\r\n\r\n          console.log('File Copied: ' + copyRes.result.name);\r\n\r\n          if (copyRes.result.name === \"game.json\") {\r\n            const originalGameJsonId = await getJson(sourceDirectoryId);\r\n            console.log('ID del archivo game.json:', originalGameJsonId);\r\n            await changeNameInJson(copyRes.result.id, originalGameJsonId, duplicateFolderName);\r\n          }\r\n        }\r\n      });\r\n\r\n      await Promise.all(copyFilePromises);\r\n      resolve();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nfunction getJson(directoryId) {\r\n  var request = gapi.client.drive.files.list({\r\n    'q': \"name='game.json' and '\" + directoryId + \"' in parents\",\r\n    'fields': 'files(id)'\r\n  });\r\n\r\n  return new Promise(function (resolve, reject) {\r\n    request.execute(function (res) {\r\n      if (res.files.length > 0) {\r\n        var gameJsonId = res.files[0].id;\r\n        resolve(gameJsonId);\r\n      } else {\r\n        reject(new Error('No se encontró el archivo game.json en la carpeta original.'));\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction changeNameInJson(duplicatedDirectoryId, originalGameJsonId, newName) {\r\n  var request = gapi.client.drive.files.get({\r\n    'fileId': originalGameJsonId,\r\n    'alt': 'media'\r\n  });\r\n\r\n  request.execute(function (res) {\r\n    var gameJsonContent = res;\r\n    gameJsonContent.name = newName;\r\n\r\n    var updatedJsonString = JSON.stringify(gameJsonContent);\r\n\r\n    var updateRequest = gapi.client.request({\r\n      'path': '/upload/drive/v3/files/' + duplicatedDirectoryId,\r\n      'method': 'PATCH',\r\n      'params': {\r\n        'uploadType': 'media'\r\n      },\r\n      'headers': {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      'body': updatedJsonString\r\n    });\r\n\r\n    updateRequest.execute(function (updateRes) {\r\n      console.log('Nombre del juego duplicado actualizado: ' + newName);\r\n    });\r\n  });\r\n}\r\n\r\nfunction duplicateSubdirectory(sourceSubdirectoryId, destinationParentId) {\r\n  var request = gapi.client.drive.files.get({\r\n    'fileId': sourceSubdirectoryId,\r\n    'fields': 'name, parents'\r\n  });\r\n  request.execute(function (res) {\r\n    console.log('Subdirectory Retrieved');\r\n    var subdirectoryData = res;\r\n    var copyRequest = gapi.client.drive.files.create({\r\n      'resource': {\r\n        'name': subdirectoryData.name,\r\n        'mimeType': 'application/vnd.google-apps.folder',\r\n        'parents': [destinationParentId]\r\n      }\r\n    });\r\n    copyRequest.execute(function (copyRes) {\r\n      console.log('Subdirectory Duplicated');\r\n      var duplicatedSubdirectoryId = copyRes.id;\r\n      copyDirectoryContents(sourceSubdirectoryId, duplicatedSubdirectoryId);\r\n    });\r\n  });\r\n}\r\n\r\n\r\nfunction createFolder(folderName, parent) {\r\n  console.log(\"createFolder \", folderName, parent);\r\n  return new Promise(function (resolve, reject) {\r\n    var request = gapi.client.request({\r\n      path: '/drive/v3/files',\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + accessToken,\r\n      },\r\n      body: {\r\n        'name': folderName,\r\n        'mimeType': 'application/vnd.google-apps.folder',\r\n        'parents': [parent]\r\n      }\r\n    });\r\n    request.execute(function (response) {\r\n      if (response.error) {\r\n        reject(new Error('Failed to create folder: ' + response.error.message));\r\n      } else if (response.id) {\r\n        resolve(response.id);\r\n      } else {\r\n        reject(new Error('Failed to create folder.'));\r\n      }\r\n    });\r\n  });\r\n}\r\n// Exporta las funciones necesarias si es necesario\r\nfunction createEmptyJson(gameID) {\r\n  return new Promise(function (resolve, reject) {\r\n    var request = gapi.client.request({\r\n      path: '/drive/v3/files',\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + accessToken,\r\n      },\r\n      body: {\r\n        'name': 'game.json',\r\n        'mimeType': 'application/json',\r\n        'parents': [gameID]\r\n      }\r\n    });\r\n    request.execute(function (response) {\r\n      if (response.error) {\r\n        reject(new Error('Failed to create JSON file: ' + response.error.message));\r\n      } else if (response.id) {\r\n        resolve(response.id);\r\n      } else {\r\n        reject(new Error('Failed to create JSON file.'));\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction createEmptyImage(gameID) {\r\n  return new Promise(function (resolve, reject) {\r\n\r\n    var metadata = {\r\n      'name': 'image.jpg',\r\n      'parents': [gameID]\r\n    };\r\n    // Crear una imagen en blanco de 1x1 píxeles\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = 1;\r\n    canvas.height = 1;\r\n    var context = canvas.getContext('2d');\r\n    context.fillStyle = '#ffffff'; // Color blanco\r\n    context.fillRect(0, 0, 1, 1);\r\n    canvas.toBlob(function (blob) {\r\n      var reader = new FileReader();\r\n      reader.onloadend = function () {\r\n        var base64Data = reader.result.split(',')[1];\r\n\r\n        var boundary = '-------314159265358979323846';\r\n        var delimiter = '\\r\\n--' + boundary + '\\r\\n';\r\n        var close_delim = '\\r\\n--' + boundary + '--';\r\n\r\n        var multipartRequestBody =\r\n          delimiter +\r\n          'Content-Type: application/json\\r\\n\\r\\n' +\r\n          JSON.stringify(metadata) +\r\n          delimiter +\r\n          'Content-Type: image/jpeg\\r\\n' +\r\n          'Content-Transfer-Encoding: base64\\r\\n' +\r\n          '\\r\\n' +\r\n          base64Data +\r\n          close_delim;\r\n\r\n        gapi.client.request({\r\n          path: '/upload/drive/v3/files',\r\n          method: 'POST',\r\n          params: {\r\n            'uploadType': 'multipart'\r\n          },\r\n          headers: {\r\n            'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"',\r\n            'Authorization': 'Bearer ' + accessToken\r\n          },\r\n          body: multipartRequestBody\r\n        }).then(function (response) {\r\n          var fileId = response.result.id;\r\n          resolve(fileId);\r\n        }).catch(function (error) {\r\n          reject(new Error('Failed to create image file: ' + error.result.error.message));\r\n        });\r\n      };\r\n\r\n      reader.readAsDataURL(blob);\r\n    }, 'image/jpeg');\r\n  });\r\n}\r\n\r\nexport {\r\n  setDriveAccessToken,\r\n  checkDriveFolder,\r\n  listDriveGames,\r\n  newGame,\r\n  editGame,\r\n  playGame,\r\n  deleteGame,\r\n  duplicateGame\r\n};\r\n\r\n"],"mappings":"AACA;AACA;;AAEA,IAAIA,WAAW;AACf,IAAIC,WAAW,GAAG,CAAC,CAAC;AACpB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,aAAa,CAAC,mBAAmB,CAAC;AACjE,IAAIC,iBAAiB,GAAGF,QAAQ,CAACC,aAAa,CAAC,sBAAsB,CAAC;AAEtE,SAASE,mBAAmBA,CAACC,KAAK,EAAE;EAClCP,WAAW,GAAGO,KAAK;AACrB;AAEA,SAASC,gBAAgBA,CAACC,eAAe,EAAE;EACzC,OAAO,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;IAC5CC,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC;MAC3BC,CAAC,EAAE,SAAS,GAAGT,eAAe,GAAG,qBAAqB;MACtDU,MAAM,EAAE;IACV,CAAC,CAAC,CAACC,IAAI,CAAC,UAAUC,QAAQ,EAAE;MAC1B,IAAIL,KAAK,GAAGK,QAAQ,CAACC,MAAM,CAACN,KAAK;MACjC,IAAIA,KAAK,IAAIA,KAAK,CAACO,MAAM,GAAG,CAAC,EAAE;QAC7BZ,OAAO,CAACK,KAAK,CAAC,CAAC,CAAC,CAACQ,EAAE,CAAC;MACtB,CAAC,MAAM;QACLC,YAAY,CAAChB,eAAe,EAAE,MAAM,EAAET,WAAW,CAAC,CAACoB,IAAI,CAAC,UAAUM,QAAQ,EAAE;UAC1Ef,OAAO,CAACe,QAAQ,CAAC;QACnB,CAAC,CAAC,CAACC,KAAK,CAAC,UAAUC,KAAK,EAAE;UACxBhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,2BAA2B,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC;QAChE,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,CAACH,KAAK,CAAC,UAAUC,KAAK,EAAE;MACxBhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,wBAAwB,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC;IAC7D,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAASC,cAAcA,CAACC,WAAW,EAAE;EACnC,OAAO,IAAItB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAIoB,WAAW,EAAE;MACfnB,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC;QAC3B,GAAG,EAAG,eAAce,WAAY,GAAE;QAAE;QACpC,QAAQ,EAAE;MACZ,CAAC,CAAC,CAACZ,IAAI,CAAC,MAAMC,QAAQ,IAAI;QACxB,MAAML,KAAK,GAAGK,QAAQ,CAACC,MAAM,CAACN,KAAK;QACnC,KAAK,IAAIiB,CAAC,GAAGjB,KAAK,CAACO,MAAM,GAAG,CAAC,EAAEU,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1C,MAAMC,YAAY,GAAGlB,KAAK,CAACiB,CAAC,CAAC,CAACT,EAAE;UAChC,IAAI;YACFR,KAAK,CAACiB,CAAC,CAAC,CAACE,QAAQ,GAAG,MAAMC,mBAAmB,CAACF,YAAY,CAAC;UAC7D,CAAC,CAAC,OAAON,KAAK,EAAE;YACdS,OAAO,CAACT,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;UAC9B;QACF;QACAnB,OAAO,CAACK,KAAK,CAAC;MAChB,CAAC,CAAC,CAACW,KAAK,CAACC,KAAK,IAAI;QAChBhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,8CAA8C,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC;MACnF,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;AACJ;AAEA,SAASM,mBAAmBA,CAACF,YAAY,EAAE;EACzC,OAAO,IAAIxB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACAC,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC;MAC3B,GAAG,EAAG,yBAAwBiB,YAAa,cAAa;MACxD,QAAQ,EAAE;IACZ,CAAC,CAAC,CAACd,IAAI,CAACC,QAAQ,IAAI;MAClB,MAAML,KAAK,GAAGK,QAAQ,CAACC,MAAM,CAACN,KAAK;MACnC,IAAIA,KAAK,IAAIA,KAAK,CAACO,MAAM,GAAG,CAAC,EAAE;QAC7B,MAAMe,WAAW,GAAGtB,KAAK,CAAC,CAAC,CAAC,CAACQ,EAAE;QAC/B,OAAOX,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACuB,GAAG,CAAC;UACjC,QAAQ,EAAED,WAAW;UACrB,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,MAAM;QACL1B,MAAM,CAAC,IAAIiB,KAAK,CAAC,iEAAiE,CAAC,CAAC;MACtF;IACF,CAAC,CAAC,CAACT,IAAI,CAACoB,GAAG,IAAI;MACb,MAAMC,IAAI,GAAGD,GAAG,CAACE,OAAO,CAAC,cAAc,CAAC;MACxC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,IAAIC,UAAU,CAACL,GAAG,CAACM,IAAI,CAACvB,MAAM,CAAC,CAACwB,GAAG,CAAC,CAACC,CAAC,EAAEf,CAAC,KAAKO,GAAG,CAACM,IAAI,CAACG,UAAU,CAAChB,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9F,MAAMiB,SAAS,GAAGC,GAAG,CAACC,eAAe,CAACT,IAAI,EAAE;QAAEF;MAAK,CAAC,CAAC;MACrD9B,OAAO,CAACuC,SAAS,CAAC;IACpB,CAAC,CAAC,CAACvB,KAAK,CAACC,KAAK,IAAI;MAChBhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,oDAAoD,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC;IACzF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,eAAeuB,OAAOA,CAACrB,WAAW,EAAE;EAClC,IAAIsB,MAAM;EACV,OAAO,IAAI5C,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCa,YAAY,CAAC,eAAe,EAAEO,WAAW,CAAC,CACvCZ,IAAI,CAAC,UAAUM,QAAQ,EAAE;MACxB4B,MAAM,GAAG5B,QAAQ;MACjB,OAAO6B,eAAe,CAACD,MAAM,CAAC;IAChC,CAAC,CAAC,CACDlC,IAAI,CAAC,YAAY;MAChB,OAAOoC,gBAAgB,CAACF,MAAM,CAAC,CAAC,CAAE;IACpC,CAAC,CAAC,CACDlC,IAAI,CAAC,YAAY;MAChB,OAAOK,YAAY,CAAC,QAAQ,EAAE6B,MAAM,CAAC;IACvC,CAAC,CAAC,CACDlC,IAAI,CAAC,YAAY;MAChB,OAAOK,YAAY,CAAC,QAAQ,EAAE6B,MAAM,CAAC;IACvC,CAAC,CAAC,CACDlC,IAAI,CAAC,YAAY;MAChBT,OAAO,CAAC2C,MAAM,CAAC;IACjB,CAAC,CAAC,CACD3B,KAAK,CAAC,UAAUC,KAAK,EAAE;MACtBS,OAAO,CAACT,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9ChB,MAAM,CAACgB,KAAK,CAAC;IACf,CAAC,CAAC;EACN,CAAC,CAAC;AACJ;AAEA,SAAS6B,QAAQA,CAACC,YAAY,EAAE;EAC9B,IAAIJ,MAAM,GAAGI,YAAY,CAACC,UAAU,CAACC,YAAY,CAAC,QAAQ,CAAC;EAC3D,IAAIC,GAAG,GAAG,aAAa,GAAGP,MAAM;EAChC,IAAIrD,WAAW,CAAC4D,GAAG,CAAC,IAAI,CAAC5D,WAAW,CAAC4D,GAAG,CAAC,CAACC,MAAM,EAAE7D,WAAW,CAAC4D,GAAG,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC,KACtE9D,WAAW,CAAC4D,GAAG,CAAC,GAAGG,MAAM,CAACC,IAAI,CAACJ,GAAG,EAAE,QAAQ,CAAC;EAClD3D,eAAe,CAACgE,KAAK,CAACC,OAAO,GAAG,MAAM;EACtC9D,iBAAiB,CAAC+D,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC;AAC9C;AAEA,SAASC,QAAQA,CAACX,YAAY,EAAE;EAC9B,IAAIJ,MAAM,GAAGI,YAAY,CAACC,UAAU,CAACC,YAAY,CAAC,QAAQ,CAAC;EAC3D,IAAIC,GAAG,GAAG,aAAa,GAAGP,MAAM;EAChC,IAAIrD,WAAW,CAAC4D,GAAG,CAAC,IAAI,CAAC5D,WAAW,CAAC4D,GAAG,CAAC,CAACC,MAAM,EAAE7D,WAAW,CAAC4D,GAAG,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC,KACtE9D,WAAW,CAAC4D,GAAG,CAAC,GAAGG,MAAM,CAACC,IAAI,CAACJ,GAAG,EAAE,QAAQ,CAAC;EAClD3D,eAAe,CAACgE,KAAK,CAACC,OAAO,GAAG,MAAM;EACtC9D,iBAAiB,CAAC+D,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC;AAC9C;AAEA,eAAeE,aAAaA,CAAChB,MAAM,EAAE;EAEnC,OAAO,IAAI5C,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACuB,GAAG,CAAC;MAC1B,QAAQ,EAAEe,MAAM;MAChB,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAClC,IAAI,CAACC,QAAQ,IAAI;MAClBgB,OAAO,CAACkC,GAAG,CAAC,uBAAuB,CAAC;MACpC,MAAMC,mBAAmB,GAAGnD,QAAQ,CAACC,MAAM,CAACmD,IAAI,GAAG,SAAS;MAC5D5D,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAAC0D,MAAM,CAAC;QAC7B,UAAU,EAAE;UACV,MAAM,EAAEF,mBAAmB;UAC3B,UAAU,EAAE,oCAAoC;UAChD,SAAS,EAAEnD,QAAQ,CAACC,MAAM,CAACqD;QAC7B;MACF,CAAC,CAAC,CAACvD,IAAI,CAACoB,GAAG,IAAI;QAEb,MAAMoC,cAAc,GAAGpC,GAAG,CAAClB,MAAM,CAACE,EAAE;QAEpCqD,qBAAqB,CAACvB,MAAM,EAAEsB,cAAc,EAAEJ,mBAAmB,CAAC,CAACpD,IAAI,CAAC,MAAM;UAC5ET,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAACgB,KAAK,CAACC,KAAK,IAAI;UAChBhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,oCAAoC,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC;QACzE,CAAC,CAAC;MACJ,CAAC,CAAC,CAACH,KAAK,CAACC,KAAK,IAAI;QAChBhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,yCAAyC,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC;MAC9E,CAAC,CAAC;IACJ,CAAC,CAAC,CAACH,KAAK,CAACC,KAAK,IAAI;MAChBhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,gCAAgC,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC;IACrE,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAGA,eAAegD,UAAUA,CAACxB,MAAM,EAAEyB,QAAQ,EAAE;EAC1C,IAAIzD,MAAM,GAAG0C,MAAM,CAACgB,OAAO,CAAE,8BAA6BD,QAAS,SAAQ,CAAC;EAC5E,IAAIzD,MAAM,EAAE;IACV,IAAI;MACF,MAAMT,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACiE,MAAM,CAAC;QACnC,QAAQ,EAAE3B;MACZ,CAAC,CAAC;MACFjB,OAAO,CAACkC,GAAG,CAAC,cAAc,CAAC;IAC7B,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACtD;EACF,CAAC,MAAM;IACLO,OAAO,CAACkC,GAAG,CAAC,wBAAwB,CAAC;EACvC;AACF;AAEA,eAAeM,qBAAqBA,CAACK,iBAAiB,EAAEC,sBAAsB,EAAEX,mBAAmB,EAAE;EACnG,OAAO,IAAI9D,OAAO,CAAC,OAAOC,OAAO,EAAEC,MAAM,KAAK;IAC5C,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMR,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC;QAClD,GAAG,EAAE,GAAG,GAAGiE,iBAAiB,GAAG,cAAc;QAC7C,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEF,MAAMlE,KAAK,GAAGK,QAAQ,CAACC,MAAM,CAACN,KAAK;MAEnC,MAAMoE,gBAAgB,GAAGpE,KAAK,CAAC+B,GAAG,CAAC,MAAOsC,IAAI,IAAK;QACjD,IAAIA,IAAI,CAACC,QAAQ,KAAK,oCAAoC,EAAE;UAC1D,MAAMC,qBAAqB,CAACF,IAAI,CAAC7D,EAAE,EAAE2D,sBAAsB,CAAC;QAC9D,CAAC,MAAM;UACL,MAAMK,OAAO,GAAG,MAAM3E,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACyE,IAAI,CAAC;YACjD,QAAQ,EAAEJ,IAAI,CAAC7D,EAAE;YACjB,SAAS,EAAE,CAAC2D,sBAAsB;UACpC,CAAC,CAAC;UAEF9C,OAAO,CAACkC,GAAG,CAAC,eAAe,GAAGiB,OAAO,CAAClE,MAAM,CAACmD,IAAI,CAAC;UAElD,IAAIe,OAAO,CAAClE,MAAM,CAACmD,IAAI,KAAK,WAAW,EAAE;YACvC,MAAMiB,kBAAkB,GAAG,MAAMC,OAAO,CAACT,iBAAiB,CAAC;YAC3D7C,OAAO,CAACkC,GAAG,CAAC,2BAA2B,EAAEmB,kBAAkB,CAAC;YAC5D,MAAME,gBAAgB,CAACJ,OAAO,CAAClE,MAAM,CAACE,EAAE,EAAEkE,kBAAkB,EAAElB,mBAAmB,CAAC;UACpF;QACF;MACF,CAAC,CAAC;MAEF,MAAM9D,OAAO,CAACmF,GAAG,CAACT,gBAAgB,CAAC;MACnCzE,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdhB,MAAM,CAACgB,KAAK,CAAC;IACf;EACF,CAAC,CAAC;AACJ;AAKA,SAAS+D,OAAOA,CAACG,WAAW,EAAE;EAC5B,IAAIC,OAAO,GAAGlF,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC;IACzC,GAAG,EAAE,wBAAwB,GAAG6E,WAAW,GAAG,cAAc;IAC5D,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,OAAO,IAAIpF,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;IAC5CmF,OAAO,CAACC,OAAO,CAAC,UAAUxD,GAAG,EAAE;MAC7B,IAAIA,GAAG,CAACxB,KAAK,CAACO,MAAM,GAAG,CAAC,EAAE;QACxB,IAAI0E,UAAU,GAAGzD,GAAG,CAACxB,KAAK,CAAC,CAAC,CAAC,CAACQ,EAAE;QAChCb,OAAO,CAACsF,UAAU,CAAC;MACrB,CAAC,MAAM;QACLrF,MAAM,CAAC,IAAIiB,KAAK,CAAC,6DAA6D,CAAC,CAAC;MAClF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAAS+D,gBAAgBA,CAACM,qBAAqB,EAAER,kBAAkB,EAAES,OAAO,EAAE;EAC5E,IAAIJ,OAAO,GAAGlF,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACuB,GAAG,CAAC;IACxC,QAAQ,EAAEmD,kBAAkB;IAC5B,KAAK,EAAE;EACT,CAAC,CAAC;EAEFK,OAAO,CAACC,OAAO,CAAC,UAAUxD,GAAG,EAAE;IAC7B,IAAI4D,eAAe,GAAG5D,GAAG;IACzB4D,eAAe,CAAC3B,IAAI,GAAG0B,OAAO;IAE9B,IAAIE,iBAAiB,GAAGC,IAAI,CAACC,SAAS,CAACH,eAAe,CAAC;IAEvD,IAAII,aAAa,GAAG3F,IAAI,CAACC,MAAM,CAACiF,OAAO,CAAC;MACtC,MAAM,EAAE,yBAAyB,GAAGG,qBAAqB;MACzD,QAAQ,EAAE,OAAO;MACjB,QAAQ,EAAE;QACR,YAAY,EAAE;MAChB,CAAC;MACD,SAAS,EAAE;QACT,cAAc,EAAE;MAClB,CAAC;MACD,MAAM,EAAEG;IACV,CAAC,CAAC;IAEFG,aAAa,CAACR,OAAO,CAAC,UAAUS,SAAS,EAAE;MACzCpE,OAAO,CAACkC,GAAG,CAAC,0CAA0C,GAAG4B,OAAO,CAAC;IACnE,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAASZ,qBAAqBA,CAACmB,oBAAoB,EAAEC,mBAAmB,EAAE;EACxE,IAAIZ,OAAO,GAAGlF,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACuB,GAAG,CAAC;IACxC,QAAQ,EAAEmE,oBAAoB;IAC9B,QAAQ,EAAE;EACZ,CAAC,CAAC;EACFX,OAAO,CAACC,OAAO,CAAC,UAAUxD,GAAG,EAAE;IAC7BH,OAAO,CAACkC,GAAG,CAAC,wBAAwB,CAAC;IACrC,IAAIqC,gBAAgB,GAAGpE,GAAG;IAC1B,IAAIqE,WAAW,GAAGhG,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAAC0D,MAAM,CAAC;MAC/C,UAAU,EAAE;QACV,MAAM,EAAEkC,gBAAgB,CAACnC,IAAI;QAC7B,UAAU,EAAE,oCAAoC;QAChD,SAAS,EAAE,CAACkC,mBAAmB;MACjC;IACF,CAAC,CAAC;IACFE,WAAW,CAACb,OAAO,CAAC,UAAUR,OAAO,EAAE;MACrCnD,OAAO,CAACkC,GAAG,CAAC,yBAAyB,CAAC;MACtC,IAAIuC,wBAAwB,GAAGtB,OAAO,CAAChE,EAAE;MACzCqD,qBAAqB,CAAC6B,oBAAoB,EAAEI,wBAAwB,CAAC;IACvE,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAGA,SAASrF,YAAYA,CAACsF,UAAU,EAAEC,MAAM,EAAE;EACxC3E,OAAO,CAACkC,GAAG,CAAC,eAAe,EAAEwC,UAAU,EAAEC,MAAM,CAAC;EAChD,OAAO,IAAItG,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;IAC5C,IAAImF,OAAO,GAAGlF,IAAI,CAACC,MAAM,CAACiF,OAAO,CAAC;MAChCkB,IAAI,EAAE,iBAAiB;MACvBC,MAAM,EAAE,MAAM;MACdxE,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAG1C;MAC/B,CAAC;MACD8C,IAAI,EAAE;QACJ,MAAM,EAAEiE,UAAU;QAClB,UAAU,EAAE,oCAAoC;QAChD,SAAS,EAAE,CAACC,MAAM;MACpB;IACF,CAAC,CAAC;IACFjB,OAAO,CAACC,OAAO,CAAC,UAAU3E,QAAQ,EAAE;MAClC,IAAIA,QAAQ,CAACO,KAAK,EAAE;QAClBhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,2BAA2B,GAAGR,QAAQ,CAACO,KAAK,CAACE,OAAO,CAAC,CAAC;MACzE,CAAC,MAAM,IAAIT,QAAQ,CAACG,EAAE,EAAE;QACtBb,OAAO,CAACU,QAAQ,CAACG,EAAE,CAAC;MACtB,CAAC,MAAM;QACLZ,MAAM,CAAC,IAAIiB,KAAK,CAAC,0BAA0B,CAAC,CAAC;MAC/C;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AACA;AACA,SAAS0B,eAAeA,CAACD,MAAM,EAAE;EAC/B,OAAO,IAAI5C,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;IAC5C,IAAImF,OAAO,GAAGlF,IAAI,CAACC,MAAM,CAACiF,OAAO,CAAC;MAChCkB,IAAI,EAAE,iBAAiB;MACvBC,MAAM,EAAE,MAAM;MACdxE,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAG1C;MAC/B,CAAC;MACD8C,IAAI,EAAE;QACJ,MAAM,EAAE,WAAW;QACnB,UAAU,EAAE,kBAAkB;QAC9B,SAAS,EAAE,CAACQ,MAAM;MACpB;IACF,CAAC,CAAC;IACFyC,OAAO,CAACC,OAAO,CAAC,UAAU3E,QAAQ,EAAE;MAClC,IAAIA,QAAQ,CAACO,KAAK,EAAE;QAClBhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,8BAA8B,GAAGR,QAAQ,CAACO,KAAK,CAACE,OAAO,CAAC,CAAC;MAC5E,CAAC,MAAM,IAAIT,QAAQ,CAACG,EAAE,EAAE;QACtBb,OAAO,CAACU,QAAQ,CAACG,EAAE,CAAC;MACtB,CAAC,MAAM;QACLZ,MAAM,CAAC,IAAIiB,KAAK,CAAC,6BAA6B,CAAC,CAAC;MAClD;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAAS2B,gBAAgBA,CAACF,MAAM,EAAE;EAChC,OAAO,IAAI5C,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;IAE5C,IAAIuG,QAAQ,GAAG;MACb,MAAM,EAAE,WAAW;MACnB,SAAS,EAAE,CAAC7D,MAAM;IACpB,CAAC;IACD;IACA,IAAI8D,MAAM,GAAGjH,QAAQ,CAACkH,aAAa,CAAC,QAAQ,CAAC;IAC7CD,MAAM,CAACE,KAAK,GAAG,CAAC;IAChBF,MAAM,CAACG,MAAM,GAAG,CAAC;IACjB,IAAIC,OAAO,GAAGJ,MAAM,CAACK,UAAU,CAAC,IAAI,CAAC;IACrCD,OAAO,CAACE,SAAS,GAAG,SAAS,CAAC,CAAC;IAC/BF,OAAO,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5BP,MAAM,CAACQ,MAAM,CAAC,UAAUjF,IAAI,EAAE;MAC5B,IAAIkF,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC7BD,MAAM,CAACE,SAAS,GAAG,YAAY;QAC7B,IAAIC,UAAU,GAAGH,MAAM,CAACvG,MAAM,CAAC2G,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAE5C,IAAIC,QAAQ,GAAG,8BAA8B;QAC7C,IAAIC,SAAS,GAAG,QAAQ,GAAGD,QAAQ,GAAG,MAAM;QAC5C,IAAIE,WAAW,GAAG,QAAQ,GAAGF,QAAQ,GAAG,IAAI;QAE5C,IAAIG,oBAAoB,GACtBF,SAAS,GACT,wCAAwC,GACxC7B,IAAI,CAACC,SAAS,CAACY,QAAQ,CAAC,GACxBgB,SAAS,GACT,8BAA8B,GAC9B,uCAAuC,GACvC,MAAM,GACNH,UAAU,GACVI,WAAW;QAEbvH,IAAI,CAACC,MAAM,CAACiF,OAAO,CAAC;UAClBkB,IAAI,EAAE,wBAAwB;UAC9BC,MAAM,EAAE,MAAM;UACdoB,MAAM,EAAE;YACN,YAAY,EAAE;UAChB,CAAC;UACD5F,OAAO,EAAE;YACP,cAAc,EAAE,+BAA+B,GAAGwF,QAAQ,GAAG,GAAG;YAChE,eAAe,EAAE,SAAS,GAAGlI;UAC/B,CAAC;UACD8C,IAAI,EAAEuF;QACR,CAAC,CAAC,CAACjH,IAAI,CAAC,UAAUC,QAAQ,EAAE;UAC1B,IAAIkH,MAAM,GAAGlH,QAAQ,CAACC,MAAM,CAACE,EAAE;UAC/Bb,OAAO,CAAC4H,MAAM,CAAC;QACjB,CAAC,CAAC,CAAC5G,KAAK,CAAC,UAAUC,KAAK,EAAE;UACxBhB,MAAM,CAAC,IAAIiB,KAAK,CAAC,+BAA+B,GAAGD,KAAK,CAACN,MAAM,CAACM,KAAK,CAACE,OAAO,CAAC,CAAC;QACjF,CAAC,CAAC;MACJ,CAAC;MAED+F,MAAM,CAACW,aAAa,CAAC7F,IAAI,CAAC;IAC5B,CAAC,EAAE,YAAY,CAAC;EAClB,CAAC,CAAC;AACJ;AAEA,SACErC,mBAAmB,EACnBE,gBAAgB,EAChBuB,cAAc,EACdsB,OAAO,EACPI,QAAQ,EACRY,QAAQ,EACRS,UAAU,EACVR,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}