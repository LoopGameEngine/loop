{"ast":null,"code":"// /apis/driverAPI.js\n/* global gapi */\n\n// async function folderExists(folderName, token) {\n//   return new Promise((resolve, reject) => {\n//     gapi.client.drive.files.list({\n//       q: `name='${folderName}' and trashed=false`,\n//       headers: token ? { Authorization: `Bearer ${token}` } : {}\n//     }).then(response => {\n//       if (response.result.files && response.result.files.length > 0) {\n//         const folderId = response.result.files[0].id;\n//         resolve(folderId);\n//       } else {\n//         resolve(undefined);\n//       }\n//     }).catch(error => {\n//       console.error('Error checking folder existence:', error.message);\n//       reject(error);\n//     });\n//   });\n// }\n\nasync function folderExists(folderName, token) {\n  try {\n    const response = await gapi.client.drive.files.list({\n      q: `name='${folderName}' and trashed=false`,\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    });\n    if (response.result.files && response.result.files.length > 0) {\n      return response.result.files[0].id;\n    } else {\n      return undefined;\n    }\n  } catch (error) {\n    console.error('Error checking folder existence:', error.message);\n    throw error;\n  }\n}\nasync function createFolder(folderName, parent, token) {\n  return new Promise(function (resolve, reject) {\n    var request = gapi.client.request({\n      path: '/drive/v3/files',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token ? `Bearer ${token}` : ''\n      },\n      body: {\n        'name': folderName,\n        'mimeType': 'application/vnd.google-apps.folder',\n        'parents': [parent]\n      }\n    });\n    request.execute(function (response) {\n      if (response.error) {\n        reject(new Error('Failed to create folder: ' + response.error.message));\n      } else if (response.id) {\n        resolve(response.id);\n      } else {\n        reject(new Error('Failed to create folder.'));\n      }\n    });\n  });\n}\nasync function listDriveGames(appFolderID, token) {\n  return new Promise(async (resolve, reject) => {\n    if (!appFolderID) {\n      resolve([]); // No hay carpeta de aplicaciones, por lo que no hay juegos que listar\n      return;\n    }\n    const files = [];\n    let pageToken = null;\n    do {\n      try {\n        const response = await gapi.client.drive.files.list({\n          q: `parents in \"${appFolderID}\"`,\n          fields: 'nextPageToken, files(id, name)',\n          headers: token ? {\n            Authorization: `Bearer ${token}`\n          } : {},\n          pageToken: pageToken\n        });\n        const gameFiles = response.result.files;\n        // Recopilar todas las solicitudes de imágenes en un array\n        const imageRequests = gameFiles.map(async file => {\n          file.imageUrl = await getImageDownloadUrl(file.id);\n          return file;\n        });\n        // Esperar a que todas las imágenes se carguen en paralelo\n        const gameFilesWithImages = await Promise.all(imageRequests);\n        // Agregar los archivos a la lista\n        files.push(...gameFilesWithImages);\n        // Actualizar el token de página para la siguiente página (si la hay)\n        pageToken = response.result.nextPageToken;\n      } catch (error) {\n        reject(new Error('Error al listar los juegos de Google Drive: ' + error.message));\n        return;\n      }\n    } while (pageToken);\n    resolve(files);\n  });\n}\nfunction getImageDownloadUrl(gameFolderID) {\n  return new Promise((resolve, reject) => {\n    gapi.client.drive.files.list({\n      'q': `name='image.jpg' and '${gameFolderID}' in parents`,\n      'fields': 'files(id)'\n    }).then(response => {\n      const files = response.result.files;\n      if (files && files.length > 0) {\n        const imageFileId = files[0].id;\n        return gapi.client.drive.files.get({\n          'fileId': imageFileId,\n          'alt': 'media'\n        });\n      } else {\n        reject(new Error('No se encontró el archivo de imagen en el directorio del juego.'));\n      }\n    }).then(res => {\n      const type = res.headers[\"Content-Type\"];\n      const blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\n      const objectUrl = URL.createObjectURL(blob, {\n        type\n      });\n      resolve(objectUrl);\n    }).catch(error => {\n      reject(new Error('Error obteniendo la URL de descarga de la imagen: ' + error.message));\n    });\n  });\n}\nasync function newGame(appFolderID, token) {\n  try {\n    const folderId = await createFolder(\"Untitled Game\", appFolderID, token);\n    await createFolder(\"images\", folderId, token);\n    await createFolder(\"sounds\", folderId, token);\n    await createEmptyJson(folderId, token);\n    await createEmptyImage(folderId, token);\n    const gameData = {\n      id: folderId,\n      name: \"Untitled Game\",\n      imageUrl: \"\"\n    };\n    return gameData;\n  } catch (error) {\n    console.error(\"Failed to create game:\", error);\n    throw error;\n  }\n}\nasync function duplicateGame(gameID) {\n  try {\n    await copyDirectory(gameID);\n    console.log('Game duplication completed. New Game ID:');\n  } catch (error) {\n    console.error('Error during game duplication:', error.message);\n    throw error;\n  }\n}\nasync function deleteGame(gameID, gameName) {\n  var result = window.confirm(`Do you want to delete the \"${gameName}\" game?`);\n  if (result) {\n    try {\n      await gapi.client.drive.files.delete({\n        'fileId': gameID\n      });\n    } catch (error) {\n      console.error('Error deleting game:', error.message);\n    }\n  } else {\n    console.log('Option selected: false');\n  }\n}\nasync function copyDirectory(sourceDirectoryID, parentDirectoryID = null) {\n  try {\n    const sourceDirInfo = await gapi.client.drive.files.get({\n      fileId: sourceDirectoryID,\n      fields: 'name, parents'\n    });\n    let newDirName = !parentDirectoryID ? `${sourceDirInfo.result.name} - Copy` : sourceDirInfo.result.name;\n    const newDirRes = await gapi.client.drive.files.create({\n      resource: {\n        name: newDirName,\n        mimeType: 'application/vnd.google-apps.folder',\n        parents: [parentDirectoryID || sourceDirInfo.result.parents[0]]\n      }\n    });\n    const newDirectoryID = newDirRes.result.id;\n    console.log(`Directory created: ${newDirName}`);\n    await copyContents(sourceDirectoryID, newDirectoryID, newDirName);\n  } catch (error) {\n    console.error('Error during directory copy:', error.message);\n    throw error;\n  }\n}\nasync function copyContents(sourceDirectoryID, newDirectoryID, newDirName) {\n  const files = await gapi.client.drive.files.list({\n    q: `'${sourceDirectoryID}' in parents`,\n    fields: 'files(id, name, mimeType)'\n  });\n  for (const file of files.result.files) {\n    if (file.mimeType === 'application/vnd.google-apps.folder') {\n      await copyDirectory(file.id, newDirectoryID);\n    } else {\n      const copyRes = await gapi.client.drive.files.copy({\n        fileId: file.id,\n        parents: [newDirectoryID]\n      });\n      console.log(`File copied: ${file.name}`);\n      if (file.name === \"game.json\") {\n        // Caso especial para modificar \"game.json\".\n        await changeNameInJson(copyRes.result.id, newDirName);\n      }\n    }\n  }\n}\nasync function changeNameInJson(fileId, newName) {\n  try {\n    const res = await gapi.client.drive.files.get({\n      fileId: fileId,\n      alt: 'media'\n    });\n    let gameJsonContent;\n    if (res.body) gameJsonContent = JSON.parse(res.body);else throw new Error('game.json content could not be retrieved.');\n    gameJsonContent.name = newName; // Asume que 'name' es la propiedad a cambiar.\n    const updatedJsonString = JSON.stringify(gameJsonContent);\n    await gapi.client.request({\n      path: `/upload/drive/v3/files/${fileId}`,\n      method: 'PATCH',\n      params: {\n        uploadType: 'media'\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: updatedJsonString\n    });\n    console.log('game.json updated with new name:', newName);\n  } catch (error) {\n    console.error('Error updating game.json:', error.message);\n    throw error;\n  }\n}\nasync function createEmptyJson(gameID, token) {\n  return new Promise(function (resolve, reject) {\n    var request = gapi.client.request({\n      path: '/drive/v3/files',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      },\n      body: {\n        'name': 'game.json',\n        'mimeType': 'application/json',\n        'parents': [gameID]\n      }\n    });\n    request.execute(function (response) {\n      if (response.error) {\n        reject(new Error('Failed to create JSON file: ' + response.error.message));\n      } else if (response.id) {\n        resolve(response.id);\n      } else {\n        reject(new Error('Failed to create JSON file.'));\n      }\n    });\n  });\n}\nasync function createEmptyImage(gameID, token) {\n  return new Promise(function (resolve, reject) {\n    var metadata = {\n      'name': 'image.jpg',\n      'parents': [gameID]\n    };\n    // Create a blank image of 1x1 pixels\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    var context = canvas.getContext('2d');\n    context.fillStyle = '#ffffff'; // White color\n    context.fillRect(0, 0, 1, 1);\n    canvas.toBlob(function (blob) {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        var base64Data = reader.result.split(',')[1];\n        var boundary = '-------314159265358979323846';\n        var delimiter = '\\r\\n--' + boundary + '\\r\\n';\n        var close_delim = '\\r\\n--' + boundary + '--';\n        var multipartRequestBody = delimiter + 'Content-Type: application/json\\r\\n\\r\\n' + JSON.stringify(metadata) + delimiter + 'Content-Type: image/jpeg\\r\\n' + 'Content-Transfer-Encoding: base64\\r\\n' + '\\r\\n' + base64Data + close_delim;\n        gapi.client.request({\n          path: '/upload/drive/v3/files',\n          method: 'POST',\n          params: {\n            'uploadType': 'multipart'\n          },\n          headers: {\n            'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"',\n            'Authorization': 'Bearer ' + token\n          },\n          body: multipartRequestBody\n        }).then(function (response) {\n          var fileId = response.result.id;\n          resolve(fileId);\n        }).catch(function (error) {\n          reject(new Error('Failed to create image file: ' + error.result.error.message));\n        });\n      };\n      reader.readAsDataURL(blob);\n    }, 'image/jpeg');\n  });\n}\nexport { folderExists, createFolder, listDriveGames, getImageDownloadUrl, newGame, deleteGame, duplicateGame };","map":{"version":3,"names":["folderExists","folderName","token","response","gapi","client","drive","files","list","q","headers","Authorization","result","length","id","undefined","error","console","message","createFolder","parent","Promise","resolve","reject","request","path","method","body","execute","Error","listDriveGames","appFolderID","pageToken","fields","gameFiles","imageRequests","map","file","imageUrl","getImageDownloadUrl","gameFilesWithImages","all","push","nextPageToken","gameFolderID","then","imageFileId","get","res","type","blob","Blob","Uint8Array","_","i","charCodeAt","objectUrl","URL","createObjectURL","catch","newGame","folderId","createEmptyJson","createEmptyImage","gameData","name","duplicateGame","gameID","copyDirectory","log","deleteGame","gameName","window","confirm","delete","sourceDirectoryID","parentDirectoryID","sourceDirInfo","fileId","newDirName","newDirRes","create","resource","mimeType","parents","newDirectoryID","copyContents","copyRes","copy","changeNameInJson","newName","alt","gameJsonContent","JSON","parse","updatedJsonString","stringify","params","uploadType","metadata","canvas","document","createElement","width","height","context","getContext","fillStyle","fillRect","toBlob","reader","FileReader","onloadend","base64Data","split","boundary","delimiter","close_delim","multipartRequestBody","readAsDataURL"],"sources":["D:/xampp/htdocs/src/apis/driveAPI.js"],"sourcesContent":["\r\n// /apis/driverAPI.js\r\n/* global gapi */\r\n\r\n// async function folderExists(folderName, token) {\r\n//   return new Promise((resolve, reject) => {\r\n//     gapi.client.drive.files.list({\r\n//       q: `name='${folderName}' and trashed=false`,\r\n//       headers: token ? { Authorization: `Bearer ${token}` } : {}\r\n//     }).then(response => {\r\n//       if (response.result.files && response.result.files.length > 0) {\r\n//         const folderId = response.result.files[0].id;\r\n//         resolve(folderId);\r\n//       } else {\r\n//         resolve(undefined);\r\n//       }\r\n//     }).catch(error => {\r\n//       console.error('Error checking folder existence:', error.message);\r\n//       reject(error);\r\n//     });\r\n//   });\r\n// }\r\n\r\nasync function folderExists(folderName, token) {\r\n  try {\r\n    const response = await gapi.client.drive.files.list({\r\n      q: `name='${folderName}' and trashed=false`,\r\n      headers: token ? { Authorization: `Bearer ${token}` } : {}\r\n    });\r\n    if (response.result.files && response.result.files.length > 0) {\r\n      return response.result.files[0].id;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error checking folder existence:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nasync function createFolder(folderName, parent, token) {\r\n  return new Promise(function (resolve, reject) {\r\n    var request = gapi.client.request({\r\n      path: '/drive/v3/files',\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token ? `Bearer ${token}` : ''\r\n      },\r\n      body: {\r\n        'name': folderName,\r\n        'mimeType': 'application/vnd.google-apps.folder',\r\n        'parents': [parent]\r\n      }\r\n    });\r\n    request.execute(function (response) {\r\n      if (response.error) {\r\n        reject(new Error('Failed to create folder: ' + response.error.message));\r\n      } else if (response.id) {\r\n        resolve(response.id);\r\n      } else {\r\n        reject(new Error('Failed to create folder.'));\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nasync function listDriveGames(appFolderID, token) {\r\n  return new Promise(async (resolve, reject) => {\r\n    if (!appFolderID) {\r\n      resolve([]); // No hay carpeta de aplicaciones, por lo que no hay juegos que listar\r\n      return;\r\n    }\r\n    const files = [];\r\n    let pageToken = null;\r\n    do {\r\n      try {\r\n        const response = await gapi.client.drive.files.list({\r\n          q: `parents in \"${appFolderID}\"`,\r\n          fields: 'nextPageToken, files(id, name)',\r\n          headers: token ? { Authorization: `Bearer ${token}` } : {},\r\n          pageToken: pageToken,\r\n        });\r\n        const gameFiles = response.result.files;\r\n        // Recopilar todas las solicitudes de imágenes en un array\r\n        const imageRequests = gameFiles.map(async (file) => {\r\n          file.imageUrl = await getImageDownloadUrl(file.id);\r\n          return file;\r\n        });\r\n        // Esperar a que todas las imágenes se carguen en paralelo\r\n        const gameFilesWithImages = await Promise.all(imageRequests);\r\n        // Agregar los archivos a la lista\r\n        files.push(...gameFilesWithImages);\r\n        // Actualizar el token de página para la siguiente página (si la hay)\r\n        pageToken = response.result.nextPageToken;\r\n      } catch (error) {\r\n        reject(new Error('Error al listar los juegos de Google Drive: ' + error.message));\r\n        return;\r\n      }\r\n    } while (pageToken);\r\n    resolve(files);\r\n  });\r\n}\r\n\r\nfunction getImageDownloadUrl(gameFolderID) {\r\n  return new Promise((resolve, reject) => {\r\n    gapi.client.drive.files.list({\r\n      'q': `name='image.jpg' and '${gameFolderID}' in parents`,\r\n      'fields': 'files(id)',\r\n    }).then(response => {\r\n      const files = response.result.files;\r\n      if (files && files.length > 0) {\r\n        const imageFileId = files[0].id;\r\n        return gapi.client.drive.files.get({\r\n          'fileId': imageFileId,\r\n          'alt': 'media',\r\n        });\r\n      } else {\r\n        reject(new Error('No se encontró el archivo de imagen en el directorio del juego.'));\r\n      }\r\n    }).then(res => {\r\n      const type = res.headers[\"Content-Type\"];\r\n      const blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\r\n      const objectUrl = URL.createObjectURL(blob, { type });\r\n      resolve(objectUrl);\r\n    }).catch(error => {\r\n      reject(new Error('Error obteniendo la URL de descarga de la imagen: ' + error.message));\r\n    });\r\n  });\r\n}\r\n\r\nasync function newGame(appFolderID, token) {\r\n  try {\r\n    const folderId = await createFolder(\"Untitled Game\", appFolderID, token);\r\n    await createFolder(\"images\", folderId, token);\r\n    await createFolder(\"sounds\", folderId, token);\r\n    await createEmptyJson(folderId, token);\r\n    await createEmptyImage(folderId, token);\r\n    const gameData = {\r\n      id: folderId,\r\n      name: \"Untitled Game\",\r\n      imageUrl: \"\"\r\n    };\r\n    return gameData;\r\n  } catch (error) {\r\n    console.error(\"Failed to create game:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function duplicateGame(gameID) {\r\n  try {\r\n    await copyDirectory(gameID);\r\n    console.log('Game duplication completed. New Game ID:');\r\n  } catch (error) {\r\n    console.error('Error during game duplication:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nasync function deleteGame(gameID, gameName) {\r\n  var result = window.confirm(`Do you want to delete the \"${gameName}\" game?`);\r\n  if (result) {\r\n    try {\r\n      await gapi.client.drive.files.delete({\r\n        'fileId': gameID\r\n      });\r\n    } catch (error) {\r\n      console.error('Error deleting game:', error.message);\r\n    }\r\n  } else {\r\n    console.log('Option selected: false');\r\n  }\r\n}\r\n\r\nasync function copyDirectory(sourceDirectoryID, parentDirectoryID = null) {\r\n  try {\r\n    const sourceDirInfo = await gapi.client.drive.files.get({\r\n      fileId: sourceDirectoryID,\r\n      fields: 'name, parents'\r\n    });\r\n    let newDirName = !parentDirectoryID ? `${sourceDirInfo.result.name} - Copy` : sourceDirInfo.result.name;\r\n    const newDirRes = await gapi.client.drive.files.create({\r\n      resource: {\r\n        name: newDirName,\r\n        mimeType: 'application/vnd.google-apps.folder',\r\n        parents: [parentDirectoryID || sourceDirInfo.result.parents[0]]\r\n      }\r\n    });\r\n    const newDirectoryID = newDirRes.result.id;\r\n    console.log(`Directory created: ${newDirName}`);\r\n    await copyContents(sourceDirectoryID, newDirectoryID, newDirName);\r\n  } catch (error) {\r\n    console.error('Error during directory copy:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function copyContents(sourceDirectoryID, newDirectoryID, newDirName) {\r\n  const files = await gapi.client.drive.files.list({\r\n    q: `'${sourceDirectoryID}' in parents`,\r\n    fields: 'files(id, name, mimeType)'\r\n  });\r\n  for (const file of files.result.files) {\r\n    if (file.mimeType === 'application/vnd.google-apps.folder') {\r\n      await copyDirectory(file.id, newDirectoryID);\r\n    } else {\r\n      const copyRes = await gapi.client.drive.files.copy({\r\n        fileId: file.id,\r\n        parents: [newDirectoryID]\r\n      });\r\n      console.log(`File copied: ${file.name}`);\r\n      if (file.name === \"game.json\") {   // Caso especial para modificar \"game.json\".\r\n        await changeNameInJson(copyRes.result.id, newDirName);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nasync function changeNameInJson(fileId, newName) {\r\n  try {\r\n    const res = await gapi.client.drive.files.get({\r\n      fileId: fileId,\r\n      alt: 'media'\r\n    });\r\n    let gameJsonContent;\r\n    if (res.body) gameJsonContent = JSON.parse(res.body);\r\n    else throw new Error('game.json content could not be retrieved.');\r\n    gameJsonContent.name = newName; // Asume que 'name' es la propiedad a cambiar.\r\n    const updatedJsonString = JSON.stringify(gameJsonContent);\r\n    await gapi.client.request({\r\n      path: `/upload/drive/v3/files/${fileId}`,\r\n      method: 'PATCH',\r\n      params: { uploadType: 'media' },\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: updatedJsonString\r\n    });\r\n    console.log('game.json updated with new name:', newName);\r\n  } catch (error) {\r\n    console.error('Error updating game.json:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function createEmptyJson(gameID, token) {\r\n  return new Promise(function (resolve, reject) {\r\n    var request = gapi.client.request({\r\n      path: '/drive/v3/files',\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + token,\r\n      },\r\n      body: {\r\n        'name': 'game.json',\r\n        'mimeType': 'application/json',\r\n        'parents': [gameID]\r\n      }\r\n    });\r\n    request.execute(function (response) {\r\n      if (response.error) {\r\n        reject(new Error('Failed to create JSON file: ' + response.error.message));\r\n      } else if (response.id) {\r\n        resolve(response.id);\r\n      } else {\r\n        reject(new Error('Failed to create JSON file.'));\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nasync function createEmptyImage(gameID, token) {\r\n  return new Promise(function (resolve, reject) {\r\n    var metadata = {\r\n      'name': 'image.jpg',\r\n      'parents': [gameID]\r\n    };\r\n    // Create a blank image of 1x1 pixels\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = 1;\r\n    canvas.height = 1;\r\n    var context = canvas.getContext('2d');\r\n    context.fillStyle = '#ffffff'; // White color\r\n    context.fillRect(0, 0, 1, 1);\r\n    canvas.toBlob(function (blob) {\r\n      var reader = new FileReader();\r\n      reader.onloadend = function () {\r\n        var base64Data = reader.result.split(',')[1];\r\n\r\n        var boundary = '-------314159265358979323846';\r\n        var delimiter = '\\r\\n--' + boundary + '\\r\\n';\r\n        var close_delim = '\\r\\n--' + boundary + '--';\r\n\r\n        var multipartRequestBody =\r\n          delimiter +\r\n          'Content-Type: application/json\\r\\n\\r\\n' +\r\n          JSON.stringify(metadata) +\r\n          delimiter +\r\n          'Content-Type: image/jpeg\\r\\n' +\r\n          'Content-Transfer-Encoding: base64\\r\\n' +\r\n          '\\r\\n' +\r\n          base64Data +\r\n          close_delim;\r\n\r\n        gapi.client.request({\r\n          path: '/upload/drive/v3/files',\r\n          method: 'POST',\r\n          params: {\r\n            'uploadType': 'multipart'\r\n          },\r\n          headers: {\r\n            'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"',\r\n            'Authorization': 'Bearer ' + token\r\n          },\r\n          body: multipartRequestBody\r\n        }).then(function (response) {\r\n          var fileId = response.result.id;\r\n          resolve(fileId);\r\n        }).catch(function (error) {\r\n          reject(new Error('Failed to create image file: ' + error.result.error.message));\r\n        });\r\n      };\r\n\r\n      reader.readAsDataURL(blob);\r\n    }, 'image/jpeg');\r\n  });\r\n}\r\n\r\nexport {\r\n  folderExists,\r\n  createFolder,\r\n  listDriveGames,\r\n  getImageDownloadUrl,\r\n  newGame,\r\n  deleteGame,\r\n  duplicateGame\r\n};\r\n\r\n"],"mappings":"AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,YAAYA,CAACC,UAAU,EAAEC,KAAK,EAAE;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC;MAClDC,CAAC,EAAG,SAAQR,UAAW,qBAAoB;MAC3CS,OAAO,EAAER,KAAK,GAAG;QAAES,aAAa,EAAG,UAAST,KAAM;MAAE,CAAC,GAAG,CAAC;IAC3D,CAAC,CAAC;IACF,IAAIC,QAAQ,CAACS,MAAM,CAACL,KAAK,IAAIJ,QAAQ,CAACS,MAAM,CAACL,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;MAC7D,OAAOV,QAAQ,CAACS,MAAM,CAACL,KAAK,CAAC,CAAC,CAAC,CAACO,EAAE;IACpC,CAAC,MAAM;MACL,OAAOC,SAAS;IAClB;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAChE,MAAMF,KAAK;EACb;AACF;AAGA,eAAeG,YAAYA,CAAClB,UAAU,EAAEmB,MAAM,EAAElB,KAAK,EAAE;EACrD,OAAO,IAAImB,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;IAC5C,IAAIC,OAAO,GAAGpB,IAAI,CAACC,MAAM,CAACmB,OAAO,CAAC;MAChCC,IAAI,EAAE,iBAAiB;MACvBC,MAAM,EAAE,MAAM;MACdhB,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAER,KAAK,GAAI,UAASA,KAAM,EAAC,GAAG;MAC/C,CAAC;MACDyB,IAAI,EAAE;QACJ,MAAM,EAAE1B,UAAU;QAClB,UAAU,EAAE,oCAAoC;QAChD,SAAS,EAAE,CAACmB,MAAM;MACpB;IACF,CAAC,CAAC;IACFI,OAAO,CAACI,OAAO,CAAC,UAAUzB,QAAQ,EAAE;MAClC,IAAIA,QAAQ,CAACa,KAAK,EAAE;QAClBO,MAAM,CAAC,IAAIM,KAAK,CAAC,2BAA2B,GAAG1B,QAAQ,CAACa,KAAK,CAACE,OAAO,CAAC,CAAC;MACzE,CAAC,MAAM,IAAIf,QAAQ,CAACW,EAAE,EAAE;QACtBQ,OAAO,CAACnB,QAAQ,CAACW,EAAE,CAAC;MACtB,CAAC,MAAM;QACLS,MAAM,CAAC,IAAIM,KAAK,CAAC,0BAA0B,CAAC,CAAC;MAC/C;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,eAAeC,cAAcA,CAACC,WAAW,EAAE7B,KAAK,EAAE;EAChD,OAAO,IAAImB,OAAO,CAAC,OAAOC,OAAO,EAAEC,MAAM,KAAK;IAC5C,IAAI,CAACQ,WAAW,EAAE;MAChBT,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACb;IACF;IACA,MAAMf,KAAK,GAAG,EAAE;IAChB,IAAIyB,SAAS,GAAG,IAAI;IACpB,GAAG;MACD,IAAI;QACF,MAAM7B,QAAQ,GAAG,MAAMC,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC;UAClDC,CAAC,EAAG,eAAcsB,WAAY,GAAE;UAChCE,MAAM,EAAE,gCAAgC;UACxCvB,OAAO,EAAER,KAAK,GAAG;YAAES,aAAa,EAAG,UAAST,KAAM;UAAE,CAAC,GAAG,CAAC,CAAC;UAC1D8B,SAAS,EAAEA;QACb,CAAC,CAAC;QACF,MAAME,SAAS,GAAG/B,QAAQ,CAACS,MAAM,CAACL,KAAK;QACvC;QACA,MAAM4B,aAAa,GAAGD,SAAS,CAACE,GAAG,CAAC,MAAOC,IAAI,IAAK;UAClDA,IAAI,CAACC,QAAQ,GAAG,MAAMC,mBAAmB,CAACF,IAAI,CAACvB,EAAE,CAAC;UAClD,OAAOuB,IAAI;QACb,CAAC,CAAC;QACF;QACA,MAAMG,mBAAmB,GAAG,MAAMnB,OAAO,CAACoB,GAAG,CAACN,aAAa,CAAC;QAC5D;QACA5B,KAAK,CAACmC,IAAI,CAAC,GAAGF,mBAAmB,CAAC;QAClC;QACAR,SAAS,GAAG7B,QAAQ,CAACS,MAAM,CAAC+B,aAAa;MAC3C,CAAC,CAAC,OAAO3B,KAAK,EAAE;QACdO,MAAM,CAAC,IAAIM,KAAK,CAAC,8CAA8C,GAAGb,KAAK,CAACE,OAAO,CAAC,CAAC;QACjF;MACF;IACF,CAAC,QAAQc,SAAS;IAClBV,OAAO,CAACf,KAAK,CAAC;EAChB,CAAC,CAAC;AACJ;AAEA,SAASgC,mBAAmBA,CAACK,YAAY,EAAE;EACzC,OAAO,IAAIvB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCnB,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC;MAC3B,GAAG,EAAG,yBAAwBoC,YAAa,cAAa;MACxD,QAAQ,EAAE;IACZ,CAAC,CAAC,CAACC,IAAI,CAAC1C,QAAQ,IAAI;MAClB,MAAMI,KAAK,GAAGJ,QAAQ,CAACS,MAAM,CAACL,KAAK;MACnC,IAAIA,KAAK,IAAIA,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;QAC7B,MAAMiC,WAAW,GAAGvC,KAAK,CAAC,CAAC,CAAC,CAACO,EAAE;QAC/B,OAAOV,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACwC,GAAG,CAAC;UACjC,QAAQ,EAAED,WAAW;UACrB,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,MAAM;QACLvB,MAAM,CAAC,IAAIM,KAAK,CAAC,iEAAiE,CAAC,CAAC;MACtF;IACF,CAAC,CAAC,CAACgB,IAAI,CAACG,GAAG,IAAI;MACb,MAAMC,IAAI,GAAGD,GAAG,CAACtC,OAAO,CAAC,cAAc,CAAC;MACxC,MAAMwC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,IAAIC,UAAU,CAACJ,GAAG,CAACrB,IAAI,CAACd,MAAM,CAAC,CAACuB,GAAG,CAAC,CAACiB,CAAC,EAAEC,CAAC,KAAKN,GAAG,CAACrB,IAAI,CAAC4B,UAAU,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9F,MAAME,SAAS,GAAGC,GAAG,CAACC,eAAe,CAACR,IAAI,EAAE;QAAED;MAAK,CAAC,CAAC;MACrD3B,OAAO,CAACkC,SAAS,CAAC;IACpB,CAAC,CAAC,CAACG,KAAK,CAAC3C,KAAK,IAAI;MAChBO,MAAM,CAAC,IAAIM,KAAK,CAAC,oDAAoD,GAAGb,KAAK,CAACE,OAAO,CAAC,CAAC;IACzF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,eAAe0C,OAAOA,CAAC7B,WAAW,EAAE7B,KAAK,EAAE;EACzC,IAAI;IACF,MAAM2D,QAAQ,GAAG,MAAM1C,YAAY,CAAC,eAAe,EAAEY,WAAW,EAAE7B,KAAK,CAAC;IACxE,MAAMiB,YAAY,CAAC,QAAQ,EAAE0C,QAAQ,EAAE3D,KAAK,CAAC;IAC7C,MAAMiB,YAAY,CAAC,QAAQ,EAAE0C,QAAQ,EAAE3D,KAAK,CAAC;IAC7C,MAAM4D,eAAe,CAACD,QAAQ,EAAE3D,KAAK,CAAC;IACtC,MAAM6D,gBAAgB,CAACF,QAAQ,EAAE3D,KAAK,CAAC;IACvC,MAAM8D,QAAQ,GAAG;MACflD,EAAE,EAAE+C,QAAQ;MACZI,IAAI,EAAE,eAAe;MACrB3B,QAAQ,EAAE;IACZ,CAAC;IACD,OAAO0B,QAAQ;EACjB,CAAC,CAAC,OAAOhD,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF;AAEA,eAAekD,aAAaA,CAACC,MAAM,EAAE;EACnC,IAAI;IACF,MAAMC,aAAa,CAACD,MAAM,CAAC;IAC3BlD,OAAO,CAACoD,GAAG,CAAC,0CAA0C,CAAC;EACzD,CAAC,CAAC,OAAOrD,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC9D,MAAMF,KAAK;EACb;AACF;AAGA,eAAesD,UAAUA,CAACH,MAAM,EAAEI,QAAQ,EAAE;EAC1C,IAAI3D,MAAM,GAAG4D,MAAM,CAACC,OAAO,CAAE,8BAA6BF,QAAS,SAAQ,CAAC;EAC5E,IAAI3D,MAAM,EAAE;IACV,IAAI;MACF,MAAMR,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACmE,MAAM,CAAC;QACnC,QAAQ,EAAEP;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOnD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACtD;EACF,CAAC,MAAM;IACLD,OAAO,CAACoD,GAAG,CAAC,wBAAwB,CAAC;EACvC;AACF;AAEA,eAAeD,aAAaA,CAACO,iBAAiB,EAAEC,iBAAiB,GAAG,IAAI,EAAE;EACxE,IAAI;IACF,MAAMC,aAAa,GAAG,MAAMzE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACwC,GAAG,CAAC;MACtD+B,MAAM,EAAEH,iBAAiB;MACzB1C,MAAM,EAAE;IACV,CAAC,CAAC;IACF,IAAI8C,UAAU,GAAG,CAACH,iBAAiB,GAAI,GAAEC,aAAa,CAACjE,MAAM,CAACqD,IAAK,SAAQ,GAAGY,aAAa,CAACjE,MAAM,CAACqD,IAAI;IACvG,MAAMe,SAAS,GAAG,MAAM5E,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAAC0E,MAAM,CAAC;MACrDC,QAAQ,EAAE;QACRjB,IAAI,EAAEc,UAAU;QAChBI,QAAQ,EAAE,oCAAoC;QAC9CC,OAAO,EAAE,CAACR,iBAAiB,IAAIC,aAAa,CAACjE,MAAM,CAACwE,OAAO,CAAC,CAAC,CAAC;MAChE;IACF,CAAC,CAAC;IACF,MAAMC,cAAc,GAAGL,SAAS,CAACpE,MAAM,CAACE,EAAE;IAC1CG,OAAO,CAACoD,GAAG,CAAE,sBAAqBU,UAAW,EAAC,CAAC;IAC/C,MAAMO,YAAY,CAACX,iBAAiB,EAAEU,cAAc,EAAEN,UAAU,CAAC;EACnE,CAAC,CAAC,OAAO/D,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC5D,MAAMF,KAAK;EACb;AACF;AAEA,eAAesE,YAAYA,CAACX,iBAAiB,EAAEU,cAAc,EAAEN,UAAU,EAAE;EACzE,MAAMxE,KAAK,GAAG,MAAMH,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACC,IAAI,CAAC;IAC/CC,CAAC,EAAG,IAAGkE,iBAAkB,cAAa;IACtC1C,MAAM,EAAE;EACV,CAAC,CAAC;EACF,KAAK,MAAMI,IAAI,IAAI9B,KAAK,CAACK,MAAM,CAACL,KAAK,EAAE;IACrC,IAAI8B,IAAI,CAAC8C,QAAQ,KAAK,oCAAoC,EAAE;MAC1D,MAAMf,aAAa,CAAC/B,IAAI,CAACvB,EAAE,EAAEuE,cAAc,CAAC;IAC9C,CAAC,MAAM;MACL,MAAME,OAAO,GAAG,MAAMnF,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACiF,IAAI,CAAC;QACjDV,MAAM,EAAEzC,IAAI,CAACvB,EAAE;QACfsE,OAAO,EAAE,CAACC,cAAc;MAC1B,CAAC,CAAC;MACFpE,OAAO,CAACoD,GAAG,CAAE,gBAAehC,IAAI,CAAC4B,IAAK,EAAC,CAAC;MACxC,IAAI5B,IAAI,CAAC4B,IAAI,KAAK,WAAW,EAAE;QAAI;QACjC,MAAMwB,gBAAgB,CAACF,OAAO,CAAC3E,MAAM,CAACE,EAAE,EAAEiE,UAAU,CAAC;MACvD;IACF;EACF;AACF;AAEA,eAAeU,gBAAgBA,CAACX,MAAM,EAAEY,OAAO,EAAE;EAC/C,IAAI;IACF,MAAM1C,GAAG,GAAG,MAAM5C,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK,CAACwC,GAAG,CAAC;MAC5C+B,MAAM,EAAEA,MAAM;MACda,GAAG,EAAE;IACP,CAAC,CAAC;IACF,IAAIC,eAAe;IACnB,IAAI5C,GAAG,CAACrB,IAAI,EAAEiE,eAAe,GAAGC,IAAI,CAACC,KAAK,CAAC9C,GAAG,CAACrB,IAAI,CAAC,CAAC,KAChD,MAAM,IAAIE,KAAK,CAAC,2CAA2C,CAAC;IACjE+D,eAAe,CAAC3B,IAAI,GAAGyB,OAAO,CAAC,CAAC;IAChC,MAAMK,iBAAiB,GAAGF,IAAI,CAACG,SAAS,CAACJ,eAAe,CAAC;IACzD,MAAMxF,IAAI,CAACC,MAAM,CAACmB,OAAO,CAAC;MACxBC,IAAI,EAAG,0BAAyBqD,MAAO,EAAC;MACxCpD,MAAM,EAAE,OAAO;MACfuE,MAAM,EAAE;QAAEC,UAAU,EAAE;MAAQ,CAAC;MAC/BxF,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CiB,IAAI,EAAEoE;IACR,CAAC,CAAC;IACF9E,OAAO,CAACoD,GAAG,CAAC,kCAAkC,EAAEqB,OAAO,CAAC;EAC1D,CAAC,CAAC,OAAO1E,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACE,OAAO,CAAC;IACzD,MAAMF,KAAK;EACb;AACF;AAEA,eAAe8C,eAAeA,CAACK,MAAM,EAAEjE,KAAK,EAAE;EAC5C,OAAO,IAAImB,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;IAC5C,IAAIC,OAAO,GAAGpB,IAAI,CAACC,MAAM,CAACmB,OAAO,CAAC;MAChCC,IAAI,EAAE,iBAAiB;MACvBC,MAAM,EAAE,MAAM;MACdhB,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGR;MAC/B,CAAC;MACDyB,IAAI,EAAE;QACJ,MAAM,EAAE,WAAW;QACnB,UAAU,EAAE,kBAAkB;QAC9B,SAAS,EAAE,CAACwC,MAAM;MACpB;IACF,CAAC,CAAC;IACF3C,OAAO,CAACI,OAAO,CAAC,UAAUzB,QAAQ,EAAE;MAClC,IAAIA,QAAQ,CAACa,KAAK,EAAE;QAClBO,MAAM,CAAC,IAAIM,KAAK,CAAC,8BAA8B,GAAG1B,QAAQ,CAACa,KAAK,CAACE,OAAO,CAAC,CAAC;MAC5E,CAAC,MAAM,IAAIf,QAAQ,CAACW,EAAE,EAAE;QACtBQ,OAAO,CAACnB,QAAQ,CAACW,EAAE,CAAC;MACtB,CAAC,MAAM;QACLS,MAAM,CAAC,IAAIM,KAAK,CAAC,6BAA6B,CAAC,CAAC;MAClD;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,eAAekC,gBAAgBA,CAACI,MAAM,EAAEjE,KAAK,EAAE;EAC7C,OAAO,IAAImB,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;IAC5C,IAAI4E,QAAQ,GAAG;MACb,MAAM,EAAE,WAAW;MACnB,SAAS,EAAE,CAAChC,MAAM;IACpB,CAAC;IACD;IACA,IAAIiC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC7CF,MAAM,CAACG,KAAK,GAAG,CAAC;IAChBH,MAAM,CAACI,MAAM,GAAG,CAAC;IACjB,IAAIC,OAAO,GAAGL,MAAM,CAACM,UAAU,CAAC,IAAI,CAAC;IACrCD,OAAO,CAACE,SAAS,GAAG,SAAS,CAAC,CAAC;IAC/BF,OAAO,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5BR,MAAM,CAACS,MAAM,CAAC,UAAU3D,IAAI,EAAE;MAC5B,IAAI4D,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC7BD,MAAM,CAACE,SAAS,GAAG,YAAY;QAC7B,IAAIC,UAAU,GAAGH,MAAM,CAAClG,MAAM,CAACsG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAE5C,IAAIC,QAAQ,GAAG,8BAA8B;QAC7C,IAAIC,SAAS,GAAG,QAAQ,GAAGD,QAAQ,GAAG,MAAM;QAC5C,IAAIE,WAAW,GAAG,QAAQ,GAAGF,QAAQ,GAAG,IAAI;QAE5C,IAAIG,oBAAoB,GACtBF,SAAS,GACT,wCAAwC,GACxCvB,IAAI,CAACG,SAAS,CAACG,QAAQ,CAAC,GACxBiB,SAAS,GACT,8BAA8B,GAC9B,uCAAuC,GACvC,MAAM,GACNH,UAAU,GACVI,WAAW;QAEbjH,IAAI,CAACC,MAAM,CAACmB,OAAO,CAAC;UAClBC,IAAI,EAAE,wBAAwB;UAC9BC,MAAM,EAAE,MAAM;UACduE,MAAM,EAAE;YACN,YAAY,EAAE;UAChB,CAAC;UACDvF,OAAO,EAAE;YACP,cAAc,EAAE,+BAA+B,GAAGyG,QAAQ,GAAG,GAAG;YAChE,eAAe,EAAE,SAAS,GAAGjH;UAC/B,CAAC;UACDyB,IAAI,EAAE2F;QACR,CAAC,CAAC,CAACzE,IAAI,CAAC,UAAU1C,QAAQ,EAAE;UAC1B,IAAI2E,MAAM,GAAG3E,QAAQ,CAACS,MAAM,CAACE,EAAE;UAC/BQ,OAAO,CAACwD,MAAM,CAAC;QACjB,CAAC,CAAC,CAACnB,KAAK,CAAC,UAAU3C,KAAK,EAAE;UACxBO,MAAM,CAAC,IAAIM,KAAK,CAAC,+BAA+B,GAAGb,KAAK,CAACJ,MAAM,CAACI,KAAK,CAACE,OAAO,CAAC,CAAC;QACjF,CAAC,CAAC;MACJ,CAAC;MAED4F,MAAM,CAACS,aAAa,CAACrE,IAAI,CAAC;IAC5B,CAAC,EAAE,YAAY,CAAC;EAClB,CAAC,CAAC;AACJ;AAEA,SACElD,YAAY,EACZmB,YAAY,EACZW,cAAc,EACdS,mBAAmB,EACnBqB,OAAO,EACPU,UAAU,EACVJ,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}