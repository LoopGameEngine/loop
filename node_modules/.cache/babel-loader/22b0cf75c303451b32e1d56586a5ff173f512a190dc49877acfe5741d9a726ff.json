{"ast":null,"code":"'use strict';\n\nvar utils = require('../utils'),\n  through = require('through2'),\n  unixStylePath = utils.unixStylePath,\n  PLUGIN_NAME = utils.PLUGIN_NAME,\n  internalsInit = require('./index.internals');\n\n/**\n * Write the source map\n *\n * @param options options to change the way the source map is written\n *\n */\nfunction write(destPath, options) {\n  var debug = require('debug-fabulous')()(PLUGIN_NAME + ':write');\n  debug(utils.logCb(\"destPath\"));\n  debug(utils.logCb(destPath));\n  debug(utils.logCb(\"original options\"));\n  debug(utils.logCb(options));\n  if (options === undefined && typeof destPath !== 'string') {\n    options = destPath;\n    destPath = undefined;\n  }\n  options = options || {};\n\n  // set defaults for options if unset\n  if (options.includeContent === undefined) options.includeContent = true;\n  if (options.addComment === undefined) options.addComment = true;\n  if (options.charset === undefined) options.charset = \"utf8\";\n  debug(utils.logCb(\"derrived options\"));\n  debug(utils.logCb(options));\n  var internals = internalsInit(destPath, options);\n  function sourceMapWrite(file, encoding, callback) {\n    /*jshint validthis:true */\n\n    if (file.isNull() || !file.sourceMap) {\n      this.push(file);\n      return callback();\n    }\n    if (file.isStream()) {\n      return callback(new Error(PLUGIN_NAME + '-write: Streaming not supported'));\n    }\n\n    // fix paths if Windows style paths\n    file.sourceMap.file = unixStylePath(file.relative);\n    internals.setSourceRoot(file);\n    internals.loadContent(file);\n    internals.mapSources(file);\n    internals.mapDestPath(file, this);\n    this.push(file);\n    callback();\n  }\n  return through.obj(sourceMapWrite);\n}\nmodule.exports = write;","map":{"version":3,"names":["utils","require","through","unixStylePath","PLUGIN_NAME","internalsInit","write","destPath","options","debug","logCb","undefined","includeContent","addComment","charset","internals","sourceMapWrite","file","encoding","callback","isNull","sourceMap","push","isStream","Error","relative","setSourceRoot","loadContent","mapSources","mapDestPath","obj","module","exports"],"sources":["D:/xampp/htdocs/app/node_modules/gulp-sourcemaps/src/write/index.js"],"sourcesContent":["'use strict';\nvar utils = require('../utils'),\n  through = require('through2'),\n  unixStylePath = utils.unixStylePath,\n  PLUGIN_NAME = utils.PLUGIN_NAME,\n  internalsInit = require('./index.internals');\n\n/**\n * Write the source map\n *\n * @param options options to change the way the source map is written\n *\n */\nfunction write(destPath, options) {\n  var debug = require('debug-fabulous')()(PLUGIN_NAME + ':write');\n\n  debug(utils.logCb(\"destPath\"));\n  debug(utils.logCb(destPath));\n\n  debug(utils.logCb(\"original options\"));\n  debug(utils.logCb(options));\n\n  if (options === undefined && typeof destPath !== 'string') {\n    options = destPath;\n    destPath = undefined;\n  }\n  options = options || {};\n\n  // set defaults for options if unset\n  if (options.includeContent === undefined)\n    options.includeContent = true;\n  if (options.addComment === undefined)\n    options.addComment = true;\n  if (options.charset === undefined)\n    options.charset = \"utf8\";\n\n  debug(utils.logCb(\"derrived options\"));\n  debug(utils.logCb(options));\n\n  var internals = internalsInit(destPath, options);\n\n  function sourceMapWrite(file, encoding, callback) {\n    /*jshint validthis:true */\n\n    if (file.isNull() || !file.sourceMap) {\n      this.push(file);\n      return callback();\n    }\n\n    if (file.isStream()) {\n      return callback(new Error(PLUGIN_NAME + '-write: Streaming not supported'));\n    }\n\n    // fix paths if Windows style paths\n    file.sourceMap.file = unixStylePath(file.relative);\n\n    internals.setSourceRoot(file);\n    internals.loadContent(file);\n    internals.mapSources(file);\n    internals.mapDestPath(file, this);\n\n    this.push(file);\n    callback();\n  }\n\n\n\n  return through.obj(sourceMapWrite);\n}\n\nmodule.exports = write;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAU,CAAC;EAC7BC,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;EAC7BE,aAAa,GAAGH,KAAK,CAACG,aAAa;EACnCC,WAAW,GAAGJ,KAAK,CAACI,WAAW;EAC/BC,aAAa,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,KAAKA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAChC,IAAIC,KAAK,GAAGR,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAACG,WAAW,GAAG,QAAQ,CAAC;EAE/DK,KAAK,CAACT,KAAK,CAACU,KAAK,CAAC,UAAU,CAAC,CAAC;EAC9BD,KAAK,CAACT,KAAK,CAACU,KAAK,CAACH,QAAQ,CAAC,CAAC;EAE5BE,KAAK,CAACT,KAAK,CAACU,KAAK,CAAC,kBAAkB,CAAC,CAAC;EACtCD,KAAK,CAACT,KAAK,CAACU,KAAK,CAACF,OAAO,CAAC,CAAC;EAE3B,IAAIA,OAAO,KAAKG,SAAS,IAAI,OAAOJ,QAAQ,KAAK,QAAQ,EAAE;IACzDC,OAAO,GAAGD,QAAQ;IAClBA,QAAQ,GAAGI,SAAS;EACtB;EACAH,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;EAEvB;EACA,IAAIA,OAAO,CAACI,cAAc,KAAKD,SAAS,EACtCH,OAAO,CAACI,cAAc,GAAG,IAAI;EAC/B,IAAIJ,OAAO,CAACK,UAAU,KAAKF,SAAS,EAClCH,OAAO,CAACK,UAAU,GAAG,IAAI;EAC3B,IAAIL,OAAO,CAACM,OAAO,KAAKH,SAAS,EAC/BH,OAAO,CAACM,OAAO,GAAG,MAAM;EAE1BL,KAAK,CAACT,KAAK,CAACU,KAAK,CAAC,kBAAkB,CAAC,CAAC;EACtCD,KAAK,CAACT,KAAK,CAACU,KAAK,CAACF,OAAO,CAAC,CAAC;EAE3B,IAAIO,SAAS,GAAGV,aAAa,CAACE,QAAQ,EAAEC,OAAO,CAAC;EAEhD,SAASQ,cAAcA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IAChD;;IAEA,IAAIF,IAAI,CAACG,MAAM,CAAC,CAAC,IAAI,CAACH,IAAI,CAACI,SAAS,EAAE;MACpC,IAAI,CAACC,IAAI,CAACL,IAAI,CAAC;MACf,OAAOE,QAAQ,CAAC,CAAC;IACnB;IAEA,IAAIF,IAAI,CAACM,QAAQ,CAAC,CAAC,EAAE;MACnB,OAAOJ,QAAQ,CAAC,IAAIK,KAAK,CAACpB,WAAW,GAAG,iCAAiC,CAAC,CAAC;IAC7E;;IAEA;IACAa,IAAI,CAACI,SAAS,CAACJ,IAAI,GAAGd,aAAa,CAACc,IAAI,CAACQ,QAAQ,CAAC;IAElDV,SAAS,CAACW,aAAa,CAACT,IAAI,CAAC;IAC7BF,SAAS,CAACY,WAAW,CAACV,IAAI,CAAC;IAC3BF,SAAS,CAACa,UAAU,CAACX,IAAI,CAAC;IAC1BF,SAAS,CAACc,WAAW,CAACZ,IAAI,EAAE,IAAI,CAAC;IAEjC,IAAI,CAACK,IAAI,CAACL,IAAI,CAAC;IACfE,QAAQ,CAAC,CAAC;EACZ;EAIA,OAAOjB,OAAO,CAAC4B,GAAG,CAACd,cAAc,CAAC;AACpC;AAEAe,MAAM,CAACC,OAAO,GAAG1B,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}