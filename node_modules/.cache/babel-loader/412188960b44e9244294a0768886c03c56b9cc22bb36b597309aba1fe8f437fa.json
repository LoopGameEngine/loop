{"ast":null,"code":"// /apis/driverAPI.js\n/* global gapi */\n\nasync function folderExists(folderName, token) {\n  return new Promise((resolve, reject) => {\n    gapi.client.drive.files.list({\n      q: `name='${folderName}' and trashed=false`,\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    }).then(response => {\n      if (response.result.files && response.result.files.length > 0) {\n        const folderId = response.result.files[0].id;\n        resolve(folderId);\n      } else {\n        resolve(undefined);\n      }\n    }).catch(error => {\n      console.error('Error checking folder existence:', error.message);\n      reject(error);\n    });\n  });\n}\nasync function createFolder(folderName, parent, token) {\n  return new Promise(function (resolve, reject) {\n    var request = gapi.client.request({\n      path: '/drive/v3/files',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token ? `Bearer ${token}` : ''\n      },\n      body: {\n        'name': folderName,\n        'mimeType': 'application/vnd.google-apps.folder',\n        'parents': [parent]\n      }\n    });\n    request.execute(function (response) {\n      if (response.error) {\n        reject(new Error('Failed to create folder: ' + response.error.message));\n      } else if (response.id) {\n        resolve(response.id);\n      } else {\n        reject(new Error('Failed to create folder.'));\n      }\n    });\n  });\n}\nasync function listDriveGames(appFolderID, token) {\n  return new Promise(async (resolve, reject) => {\n    if (!appFolderID) {\n      resolve([]); // No hay carpeta de aplicaciones, por lo que no hay juegos que listar\n      return;\n    }\n    const files = [];\n    let pageToken = null;\n    do {\n      try {\n        const response = await gapi.client.drive.files.list({\n          q: `parents in \"${appFolderID}\"`,\n          fields: 'nextPageToken, files(id, name)',\n          headers: token ? {\n            Authorization: `Bearer ${token}`\n          } : {},\n          pageToken: pageToken\n        });\n        const gameFiles = response.result.files;\n        // Recopilar todas las solicitudes de imágenes en un array\n        const imageRequests = gameFiles.map(async file => {\n          file.imageUrl = await getImageDownloadUrl(file.id);\n          return file;\n        });\n        // Esperar a que todas las imágenes se carguen en paralelo\n        const gameFilesWithImages = await Promise.all(imageRequests);\n        // Agregar los archivos a la lista\n        files.push(...gameFilesWithImages);\n        // Actualizar el token de página para la siguiente página (si la hay)\n        pageToken = response.result.nextPageToken;\n      } catch (error) {\n        reject(new Error('Error al listar los juegos de Google Drive: ' + error.message));\n        return;\n      }\n    } while (pageToken);\n    resolve(files);\n  });\n}\nfunction getImageDownloadUrl(gameFolderID) {\n  return new Promise((resolve, reject) => {\n    gapi.client.drive.files.list({\n      'q': `name='image.jpg' and '${gameFolderID}' in parents`,\n      'fields': 'files(id)'\n    }).then(response => {\n      const files = response.result.files;\n      if (files && files.length > 0) {\n        const imageFileId = files[0].id;\n        return gapi.client.drive.files.get({\n          'fileId': imageFileId,\n          'alt': 'media'\n        });\n      } else {\n        reject(new Error('No se encontró el archivo de imagen en el directorio del juego.'));\n      }\n    }).then(res => {\n      const type = res.headers[\"Content-Type\"];\n      const blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\n      const objectUrl = URL.createObjectURL(blob, {\n        type\n      });\n      resolve(objectUrl);\n    }).catch(error => {\n      reject(new Error('Error obteniendo la URL de descarga de la imagen: ' + error.message));\n    });\n  });\n}\nasync function newGame(appFolderID, token) {\n  try {\n    const folderId = await createFolder(\"Untitled Game\", appFolderID, token);\n    await createFolder(\"images\", folderId, token);\n    await createFolder(\"sounds\", folderId, token);\n    await createEmptyJson(folderId, token);\n    await createEmptyImage(folderId, token);\n    const gameData = {\n      id: folderId,\n      name: \"Untitled Game\",\n      imageUrl: \"\"\n    };\n    return gameData;\n  } catch (error) {\n    console.error(\"Failed to create game:\", error);\n    throw error;\n  }\n}\n\n// async function newGame(appFolderID, token) {\n//   var gameID;\n//   return new Promise((resolve, reject) => {\n//     createFolder(\"Untitled Game\", appFolderID, token)\n//       .then(function (folderId) {\n//         gameID = folderId;\n//         return createEmptyJson(gameID, token);\n//       })\n//       .then(function () {\n//         return createEmptyImage(gameID, token);\n//       })\n//       .then(function () {\n//         return createFolder(\"images\", gameID, token);\n//       })\n//       .then(function () {\n//         return createFolder(\"sounds\", gameID, token);\n//       })\n//       .then(function () {\n//         resolve(gameID);\n//       })\n//       .catch(function (error) {\n//         console.error(\"Failed to create game:\", error);\n//         reject(error);\n//       });\n//   });\n// }\n\nasync function duplicateGame(gameID) {\n  return new Promise((resolve, reject) => {\n    gapi.client.drive.files.get({\n      'fileId': gameID,\n      'fields': 'name, parents'\n    }).then(response => {\n      console.log('Game Folder Retrieved');\n      const duplicateFolderName = response.result.name + ' - Copy';\n      gapi.client.drive.files.create({\n        'resource': {\n          'name': duplicateFolderName,\n          'mimeType': 'application/vnd.google-apps.folder',\n          'parents': response.result.parents\n        }\n      }).then(res => {\n        const newDirectoryId = res.result.id;\n        copyDirectoryContents(gameID, newDirectoryId, duplicateFolderName).then(() => {\n          resolve();\n        }).catch(error => {\n          reject(new Error('Error copying directory contents: ' + error.message));\n        });\n      }).catch(error => {\n        reject(new Error('Error creating duplicated game folder: ' + error.message));\n      });\n    }).catch(error => {\n      reject(new Error('Error retrieving game folder: ' + error.message));\n    });\n  });\n}\nasync function deleteGame(gameID, gameName) {\n  var result = window.confirm(`Do you want to delete the \"${gameName}\" game?`);\n  if (result) {\n    try {\n      await gapi.client.drive.files.delete({\n        'fileId': gameID\n      });\n    } catch (error) {\n      console.error('Error deleting game:', error.message);\n    }\n  } else {\n    console.log('Option selected: false');\n  }\n}\nasync function copyDirectoryContents(sourceDirectoryId, destinationDirectoryId, duplicateFolderName) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await gapi.client.drive.files.list({\n        'q': \"'\" + sourceDirectoryId + \"' in parents\",\n        'fields': 'files(id, name, mimeType)'\n      });\n      const files = response.result.files;\n      const copyFilePromises = files.map(async file => {\n        if (file.mimeType === 'application/vnd.google-apps.folder') {\n          await duplicateSubdirectory(file.id, destinationDirectoryId);\n        } else {\n          const copyRes = await gapi.client.drive.files.copy({\n            'fileId': file.id,\n            'parents': [destinationDirectoryId]\n          });\n          console.log('File Copied: ' + copyRes.result.name);\n          if (copyRes.result.name === \"game.json\") {\n            const originalGameJsonId = await getJson(sourceDirectoryId);\n            console.log('ID del archivo game.json:', originalGameJsonId);\n            await changeNameInJson(copyRes.result.id, originalGameJsonId, duplicateFolderName);\n          }\n        }\n      });\n      await Promise.all(copyFilePromises);\n      resolve();\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nfunction getJson(directoryId) {\n  var request = gapi.client.drive.files.list({\n    'q': \"name='game.json' and '\" + directoryId + \"' in parents\",\n    'fields': 'files(id)'\n  });\n  return new Promise(function (resolve, reject) {\n    request.execute(function (res) {\n      if (res.files.length > 0) {\n        var gameJsonId = res.files[0].id;\n        resolve(gameJsonId);\n      } else {\n        reject(new Error('No se encontró el archivo game.json en la carpeta original.'));\n      }\n    });\n  });\n}\nfunction changeNameInJson(duplicatedDirectoryId, originalGameJsonId, newName) {\n  var request = gapi.client.drive.files.get({\n    'fileId': originalGameJsonId,\n    'alt': 'media'\n  });\n  request.execute(function (res) {\n    var gameJsonContent = res;\n    gameJsonContent.name = newName;\n    var updatedJsonString = JSON.stringify(gameJsonContent);\n    var updateRequest = gapi.client.request({\n      'path': '/upload/drive/v3/files/' + duplicatedDirectoryId,\n      'method': 'PATCH',\n      'params': {\n        'uploadType': 'media'\n      },\n      'headers': {\n        'Content-Type': 'application/json'\n      },\n      'body': updatedJsonString\n    });\n    updateRequest.execute(function (updateRes) {\n      console.log('Nombre del juego duplicado actualizado: ' + newName);\n    });\n  });\n}\nfunction duplicateSubdirectory(sourceSubdirectoryId, destinationParentId) {\n  var request = gapi.client.drive.files.get({\n    'fileId': sourceSubdirectoryId,\n    'fields': 'name, parents'\n  });\n  request.execute(function (res) {\n    console.log('Subdirectory Retrieved');\n    var subdirectoryData = res;\n    var copyRequest = gapi.client.drive.files.create({\n      'resource': {\n        'name': subdirectoryData.name,\n        'mimeType': 'application/vnd.google-apps.folder',\n        'parents': [destinationParentId]\n      }\n    });\n    copyRequest.execute(function (copyRes) {\n      console.log('Subdirectory Duplicated');\n      var duplicatedSubdirectoryId = copyRes.id;\n      copyDirectoryContents(sourceSubdirectoryId, duplicatedSubdirectoryId);\n    });\n  });\n}\nfunction createEmptyJson(gameID, token) {\n  return new Promise(function (resolve, reject) {\n    var request = gapi.client.request({\n      path: '/drive/v3/files',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      },\n      body: {\n        'name': 'game.json',\n        'mimeType': 'application/json',\n        'parents': [gameID]\n      }\n    });\n    request.execute(function (response) {\n      if (response.error) {\n        reject(new Error('Failed to create JSON file: ' + response.error.message));\n      } else if (response.id) {\n        resolve(response.id);\n      } else {\n        reject(new Error('Failed to create JSON file.'));\n      }\n    });\n  });\n}\nfunction createEmptyImage(gameID, token) {\n  return new Promise(function (resolve, reject) {\n    var metadata = {\n      'name': 'image.jpg',\n      'parents': [gameID]\n    };\n    // Create a blank image of 1x1 pixels\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    var context = canvas.getContext('2d');\n    context.fillStyle = '#ffffff'; // White color\n    context.fillRect(0, 0, 1, 1);\n    canvas.toBlob(function (blob) {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        var base64Data = reader.result.split(',')[1];\n        var boundary = '-------314159265358979323846';\n        var delimiter = '\\r\\n--' + boundary + '\\r\\n';\n        var close_delim = '\\r\\n--' + boundary + '--';\n        var multipartRequestBody = delimiter + 'Content-Type: application/json\\r\\n\\r\\n' + JSON.stringify(metadata) + delimiter + 'Content-Type: image/jpeg\\r\\n' + 'Content-Transfer-Encoding: base64\\r\\n' + '\\r\\n' + base64Data + close_delim;\n        gapi.client.request({\n          path: '/upload/drive/v3/files',\n          method: 'POST',\n          params: {\n            'uploadType': 'multipart'\n          },\n          headers: {\n            'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"',\n            'Authorization': 'Bearer ' + token\n          },\n          body: multipartRequestBody\n        }).then(function (response) {\n          var fileId = response.result.id;\n          resolve(fileId);\n        }).catch(function (error) {\n          reject(new Error('Failed to create image file: ' + error.result.error.message));\n        });\n      };\n      reader.readAsDataURL(blob);\n    }, 'image/jpeg');\n  });\n}\nexport { folderExists, createFolder, listDriveGames, newGame, deleteGame, duplicateGame };","map":{"version":3,"names":["folderExists","folderName","token","Promise","resolve","reject","gapi","client","drive","files","list","q","headers","Authorization","then","response","result","length","folderId","id","undefined","catch","error","console","message","createFolder","parent","request","path","method","body","execute","Error","listDriveGames","appFolderID","pageToken","fields","gameFiles","imageRequests","map","file","imageUrl","getImageDownloadUrl","gameFilesWithImages","all","push","nextPageToken","gameFolderID","imageFileId","get","res","type","blob","Blob","Uint8Array","_","i","charCodeAt","objectUrl","URL","createObjectURL","newGame","createEmptyJson","createEmptyImage","gameData","name","duplicateGame","gameID","log","duplicateFolderName","create","parents","newDirectoryId","copyDirectoryContents","deleteGame","gameName","window","confirm","delete","sourceDirectoryId","destinationDirectoryId","copyFilePromises","mimeType","duplicateSubdirectory","copyRes","copy","originalGameJsonId","getJson","changeNameInJson","directoryId","gameJsonId","duplicatedDirectoryId","newName","gameJsonContent","updatedJsonString","JSON","stringify","updateRequest","updateRes","sourceSubdirectoryId","destinationParentId","subdirectoryData","copyRequest","duplicatedSubdirectoryId","metadata","canvas","document","createElement","width","height","context","getContext","fillStyle","fillRect","toBlob","reader","FileReader","onloadend","base64Data","split","boundary","delimiter","close_delim","multipartRequestBody","params","fileId","readAsDataURL"],"sources":["D:/xampp/htdocs/src/apis/driveAPI.js"],"sourcesContent":["\r\n// /apis/driverAPI.js\r\n/* global gapi */\r\n\r\nasync function folderExists(folderName, token) {\r\n  return new Promise((resolve, reject) => {\r\n    gapi.client.drive.files.list({\r\n      q: `name='${folderName}' and trashed=false`,\r\n      headers: token ? { Authorization: `Bearer ${token}` } : {}\r\n    }).then(response => {\r\n      if (response.result.files && response.result.files.length > 0) {\r\n        const folderId = response.result.files[0].id;\r\n        resolve(folderId);\r\n      } else {\r\n        resolve(undefined);\r\n      }\r\n    }).catch(error => {\r\n      console.error('Error checking folder existence:', error.message);\r\n      reject(error);\r\n    });\r\n  });\r\n}\r\n\r\nasync function createFolder(folderName, parent, token) {\r\n  return new Promise(function (resolve, reject) {\r\n    var request = gapi.client.request({\r\n      path: '/drive/v3/files',\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token ? `Bearer ${token}` : ''\r\n      },\r\n      body: {\r\n        'name': folderName,\r\n        'mimeType': 'application/vnd.google-apps.folder',\r\n        'parents': [parent]\r\n      }\r\n    });\r\n    request.execute(function (response) {\r\n      if (response.error) {\r\n        reject(new Error('Failed to create folder: ' + response.error.message));\r\n      } else if (response.id) {\r\n        resolve(response.id);\r\n      } else {\r\n        reject(new Error('Failed to create folder.'));\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nasync function listDriveGames(appFolderID, token) {\r\n  return new Promise(async (resolve, reject) => {\r\n    if (!appFolderID) {\r\n      resolve([]); // No hay carpeta de aplicaciones, por lo que no hay juegos que listar\r\n      return;\r\n    }\r\n    const files = [];\r\n    let pageToken = null;\r\n    do {\r\n      try {\r\n        const response = await gapi.client.drive.files.list({\r\n          q: `parents in \"${appFolderID}\"`,\r\n          fields: 'nextPageToken, files(id, name)',\r\n          headers: token ? { Authorization: `Bearer ${token}` } : {},\r\n          pageToken: pageToken,\r\n        });\r\n        const gameFiles = response.result.files;\r\n        // Recopilar todas las solicitudes de imágenes en un array\r\n        const imageRequests = gameFiles.map(async (file) => {\r\n          file.imageUrl = await getImageDownloadUrl(file.id);\r\n          return file;\r\n        });\r\n        // Esperar a que todas las imágenes se carguen en paralelo\r\n        const gameFilesWithImages = await Promise.all(imageRequests);\r\n        // Agregar los archivos a la lista\r\n        files.push(...gameFilesWithImages);\r\n        // Actualizar el token de página para la siguiente página (si la hay)\r\n        pageToken = response.result.nextPageToken;\r\n      } catch (error) {\r\n        reject(new Error('Error al listar los juegos de Google Drive: ' + error.message));\r\n        return;\r\n      }\r\n    } while (pageToken);\r\n    resolve(files);\r\n  });\r\n}\r\n\r\nfunction getImageDownloadUrl(gameFolderID) {\r\n  return new Promise((resolve, reject) => {\r\n    gapi.client.drive.files.list({\r\n      'q': `name='image.jpg' and '${gameFolderID}' in parents`,\r\n      'fields': 'files(id)',\r\n    }).then(response => {\r\n      const files = response.result.files;\r\n      if (files && files.length > 0) {\r\n        const imageFileId = files[0].id;\r\n        return gapi.client.drive.files.get({\r\n          'fileId': imageFileId,\r\n          'alt': 'media',\r\n        });\r\n      } else {\r\n        reject(new Error('No se encontró el archivo de imagen en el directorio del juego.'));\r\n      }\r\n    }).then(res => {\r\n      const type = res.headers[\"Content-Type\"];\r\n      const blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\r\n      const objectUrl = URL.createObjectURL(blob, { type });\r\n      resolve(objectUrl);\r\n    }).catch(error => {\r\n      reject(new Error('Error obteniendo la URL de descarga de la imagen: ' + error.message));\r\n    });\r\n  });\r\n}\r\n\r\nasync function newGame(appFolderID, token) {\r\n  try {\r\n    const folderId = await createFolder(\"Untitled Game\", appFolderID, token);\r\n    await createFolder(\"images\", folderId, token);\r\n    await createFolder(\"sounds\", folderId, token);\r\n    await createEmptyJson(folderId, token);\r\n     await createEmptyImage(folderId, token);\r\n    const gameData = {\r\n      id: folderId,\r\n      name: \"Untitled Game\",\r\n      imageUrl: \"\"\r\n    };\r\n    return gameData;\r\n  } catch (error) {\r\n    console.error(\"Failed to create game:\", error);\r\n    throw error; \r\n  }\r\n}\r\n\r\n\r\n// async function newGame(appFolderID, token) {\r\n//   var gameID;\r\n//   return new Promise((resolve, reject) => {\r\n//     createFolder(\"Untitled Game\", appFolderID, token)\r\n//       .then(function (folderId) {\r\n//         gameID = folderId;\r\n//         return createEmptyJson(gameID, token);\r\n//       })\r\n//       .then(function () {\r\n//         return createEmptyImage(gameID, token);\r\n//       })\r\n//       .then(function () {\r\n//         return createFolder(\"images\", gameID, token);\r\n//       })\r\n//       .then(function () {\r\n//         return createFolder(\"sounds\", gameID, token);\r\n//       })\r\n//       .then(function () {\r\n//         resolve(gameID);\r\n//       })\r\n//       .catch(function (error) {\r\n//         console.error(\"Failed to create game:\", error);\r\n//         reject(error);\r\n//       });\r\n//   });\r\n// }\r\n\r\nasync function duplicateGame(gameID) {\r\n  return new Promise((resolve, reject) => {\r\n    gapi.client.drive.files.get({\r\n      'fileId': gameID,\r\n      'fields': 'name, parents'\r\n    }).then(response => {\r\n      console.log('Game Folder Retrieved');\r\n      const duplicateFolderName = response.result.name + ' - Copy';\r\n      gapi.client.drive.files.create({\r\n        'resource': {\r\n          'name': duplicateFolderName,\r\n          'mimeType': 'application/vnd.google-apps.folder',\r\n          'parents': response.result.parents\r\n        }\r\n      }).then(res => {\r\n\r\n        const newDirectoryId = res.result.id;\r\n\r\n        copyDirectoryContents(gameID, newDirectoryId, duplicateFolderName).then(() => {\r\n          resolve();\r\n        }).catch(error => {\r\n          reject(new Error('Error copying directory contents: ' + error.message));\r\n        });\r\n      }).catch(error => {\r\n        reject(new Error('Error creating duplicated game folder: ' + error.message));\r\n      });\r\n    }).catch(error => {\r\n      reject(new Error('Error retrieving game folder: ' + error.message));\r\n    });\r\n  });\r\n}\r\n\r\nasync function deleteGame(gameID, gameName) {\r\n  var result = window.confirm(`Do you want to delete the \"${gameName}\" game?`);\r\n  if (result) {\r\n    try {\r\n      await gapi.client.drive.files.delete({\r\n        'fileId': gameID\r\n      });\r\n    } catch (error) {\r\n      console.error('Error deleting game:', error.message);\r\n    }\r\n  } else {\r\n    console.log('Option selected: false');\r\n  }\r\n}\r\n\r\nasync function copyDirectoryContents(sourceDirectoryId, destinationDirectoryId, duplicateFolderName) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const response = await gapi.client.drive.files.list({\r\n        'q': \"'\" + sourceDirectoryId + \"' in parents\",\r\n        'fields': 'files(id, name, mimeType)'\r\n      });\r\n      const files = response.result.files;\r\n      const copyFilePromises = files.map(async (file) => {\r\n        if (file.mimeType === 'application/vnd.google-apps.folder') {\r\n          await duplicateSubdirectory(file.id, destinationDirectoryId);\r\n        } else {\r\n          const copyRes = await gapi.client.drive.files.copy({\r\n            'fileId': file.id,\r\n            'parents': [destinationDirectoryId]\r\n          });\r\n          console.log('File Copied: ' + copyRes.result.name);\r\n          if (copyRes.result.name === \"game.json\") {\r\n            const originalGameJsonId = await getJson(sourceDirectoryId);\r\n            console.log('ID del archivo game.json:', originalGameJsonId);\r\n            await changeNameInJson(copyRes.result.id, originalGameJsonId, duplicateFolderName);\r\n          }\r\n        }\r\n      });\r\n      await Promise.all(copyFilePromises);\r\n      resolve();\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\nfunction getJson(directoryId) {\r\n  var request = gapi.client.drive.files.list({\r\n    'q': \"name='game.json' and '\" + directoryId + \"' in parents\",\r\n    'fields': 'files(id)'\r\n  });\r\n  return new Promise(function (resolve, reject) {\r\n    request.execute(function (res) {\r\n      if (res.files.length > 0) {\r\n        var gameJsonId = res.files[0].id;\r\n        resolve(gameJsonId);\r\n      } else {\r\n        reject(new Error('No se encontró el archivo game.json en la carpeta original.'));\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction changeNameInJson(duplicatedDirectoryId, originalGameJsonId, newName) {\r\n  var request = gapi.client.drive.files.get({\r\n    'fileId': originalGameJsonId,\r\n    'alt': 'media'\r\n  });\r\n  request.execute(function (res) {\r\n    var gameJsonContent = res;\r\n    gameJsonContent.name = newName;\r\n    var updatedJsonString = JSON.stringify(gameJsonContent);\r\n    var updateRequest = gapi.client.request({\r\n      'path': '/upload/drive/v3/files/' + duplicatedDirectoryId,\r\n      'method': 'PATCH',\r\n      'params': {\r\n        'uploadType': 'media'\r\n      },\r\n      'headers': {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      'body': updatedJsonString\r\n    });\r\n    updateRequest.execute(function (updateRes) {\r\n      console.log('Nombre del juego duplicado actualizado: ' + newName);\r\n    });\r\n  });\r\n}\r\n\r\nfunction duplicateSubdirectory(sourceSubdirectoryId, destinationParentId) {\r\n  var request = gapi.client.drive.files.get({\r\n    'fileId': sourceSubdirectoryId,\r\n    'fields': 'name, parents'\r\n  });\r\n  request.execute(function (res) {\r\n    console.log('Subdirectory Retrieved');\r\n    var subdirectoryData = res;\r\n    var copyRequest = gapi.client.drive.files.create({\r\n      'resource': {\r\n        'name': subdirectoryData.name,\r\n        'mimeType': 'application/vnd.google-apps.folder',\r\n        'parents': [destinationParentId]\r\n      }\r\n    });\r\n    copyRequest.execute(function (copyRes) {\r\n      console.log('Subdirectory Duplicated');\r\n      var duplicatedSubdirectoryId = copyRes.id;\r\n      copyDirectoryContents(sourceSubdirectoryId, duplicatedSubdirectoryId);\r\n    });\r\n  });\r\n}\r\n\r\nfunction createEmptyJson(gameID, token) {\r\n  return new Promise(function (resolve, reject) {\r\n    var request = gapi.client.request({\r\n      path: '/drive/v3/files',\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + token,\r\n      },\r\n      body: {\r\n        'name': 'game.json',\r\n        'mimeType': 'application/json',\r\n        'parents': [gameID]\r\n      }\r\n    });\r\n    request.execute(function (response) {\r\n      if (response.error) {\r\n        reject(new Error('Failed to create JSON file: ' + response.error.message));\r\n      } else if (response.id) {\r\n        resolve(response.id);\r\n      } else {\r\n        reject(new Error('Failed to create JSON file.'));\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction createEmptyImage(gameID, token) {\r\n  return new Promise(function (resolve, reject) {\r\n    var metadata = {\r\n      'name': 'image.jpg',\r\n      'parents': [gameID]\r\n    };\r\n    // Create a blank image of 1x1 pixels\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = 1;\r\n    canvas.height = 1;\r\n    var context = canvas.getContext('2d');\r\n    context.fillStyle = '#ffffff'; // White color\r\n    context.fillRect(0, 0, 1, 1);\r\n    canvas.toBlob(function (blob) {\r\n      var reader = new FileReader();\r\n      reader.onloadend = function () {\r\n        var base64Data = reader.result.split(',')[1];\r\n\r\n        var boundary = '-------314159265358979323846';\r\n        var delimiter = '\\r\\n--' + boundary + '\\r\\n';\r\n        var close_delim = '\\r\\n--' + boundary + '--';\r\n\r\n        var multipartRequestBody =\r\n          delimiter +\r\n          'Content-Type: application/json\\r\\n\\r\\n' +\r\n          JSON.stringify(metadata) +\r\n          delimiter +\r\n          'Content-Type: image/jpeg\\r\\n' +\r\n          'Content-Transfer-Encoding: base64\\r\\n' +\r\n          '\\r\\n' +\r\n          base64Data +\r\n          close_delim;\r\n\r\n        gapi.client.request({\r\n          path: '/upload/drive/v3/files',\r\n          method: 'POST',\r\n          params: {\r\n            'uploadType': 'multipart'\r\n          },\r\n          headers: {\r\n            'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"',\r\n            'Authorization': 'Bearer ' + token\r\n          },\r\n          body: multipartRequestBody\r\n        }).then(function (response) {\r\n          var fileId = response.result.id;\r\n          resolve(fileId);\r\n        }).catch(function (error) {\r\n          reject(new Error('Failed to create image file: ' + error.result.error.message));\r\n        });\r\n      };\r\n\r\n      reader.readAsDataURL(blob);\r\n    }, 'image/jpeg');\r\n  });\r\n}\r\n\r\nexport {\r\n  folderExists,\r\n  createFolder,\r\n  listDriveGames,\r\n  newGame,\r\n  deleteGame,\r\n  duplicateGame\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}