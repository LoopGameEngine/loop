{"ast":null,"code":"'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\nvar EE = require('events');\n\n/*<replacement>*/\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = undefined;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar StringDecoder;\nutil.inherits(Readable, Stream);\nvar Duplex;\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\nvar Duplex;\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options);\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n  if (options && typeof options.read === 'function') this._read = options.read;\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return n === 0 ? 0 : 1;\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n  if (n <= 0) return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else {\n      return state.length;\n    }\n  }\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended) state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n  return dest;\n};\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    for (var _i = 0; _i < len; _i++) {\n      dests[_i].emit('unpipe', this);\n    }\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this);\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n  if (ev === 'readable' && !this._readableState.endEmitted) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n    self.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0) return null;\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n        c += cpy;\n      }\n    }\n  }\n  return ret;\n}\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","map":{"version":3,"names":["module","exports","Readable","processNextTick","require","isArray","Buffer","ReadableState","EE","EElistenerCount","emitter","type","listeners","length","Stream","_","EventEmitter","util","inherits","debugUtil","debug","undefined","debuglog","StringDecoder","Duplex","options","stream","objectMode","readableObjectMode","hwm","highWaterMark","defaultHwm","buffer","pipes","pipesCount","flowing","ended","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","defaultEncoding","ranOut","awaitDrain","readingMore","decoder","encoding","_readableState","readable","read","_read","call","prototype","push","chunk","state","readableAddChunk","unshift","isPaused","addToFront","er","chunkInvalid","emit","onEofChunk","e","Error","skipAdd","write","emitReadable","maybeReadMore","needMoreData","setEncoding","enc","MAX_HWM","computeNewHighWaterMark","n","howMuchToRead","isNaN","nOrig","endReadable","doRead","ret","fromList","isBuffer","TypeError","end","emitReadable_","flow","maybeReadMore_","len","pipe","dest","pipeOpts","src","doEnd","process","stdout","stderr","endFn","onend","cleanup","once","on","onunpipe","ondrain","pipeOnDrain","cleanedUp","removeListener","onclose","onfinish","onerror","ondata","_writableState","needDrain","listenerCount","pause","unpipe","_events","error","resume","dests","_i","i","indexOf","splice","ev","fn","res","nReadingNextTick","addListener","self","resume_","wrap","paused","method","apply","arguments","events","forEach","bind","_fromList","list","stringMode","shift","join","concat","buf","slice","c","l","cpy","Math","min","copy","endReadableNT","xs","f","x"],"sources":["D:/xampp/htdocs/app/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_readable.js"],"sourcesContent":["'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events');\n\n/*<replacement>*/\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = undefined;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar Duplex;\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nvar Duplex;\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function') this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n\n  if (state.objectMode) return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n\n  if (n <= 0) return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else {\n      return state.length;\n    }\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended) state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var _i = 0; _i < len; _i++) {\n      dests[_i].emit('unpipe', this);\n    }return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && !this._readableState.endEmitted) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0) return null;\n\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}