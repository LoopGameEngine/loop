{"ast":null,"code":"/* global gapi, google  */\nimport Command from '../editor/commands/ommand';\nimport PIXI from 'https://pixijs.download/v6.1.3/pixi.min.js';\nimport Howl from '../engine/libraries/howler.min.js';\nclass File {\n  loadJson(gameId, callback) {\n    gapi.client.drive.files.list({\n      'q': `parents in \"${gameId}\" and name=\"game.json\" and trashed=false` // Agregar \"and trashed=false\" al query\n    }).then(function (res) {\n      if (res.result.files.length > 0) {\n        gapi.client.drive.files.get({\n          fileId: res.result.files[0].id,\n          alt: 'media'\n        }).then(function (res) {\n          var json;\n          if (res.body === \"\") json = JSON.parse(\"{}\");else json = JSON.parse(res.body);\n          callback(json);\n        });\n      }\n    });\n  }\n  loadImages(gameId, loader, callback) {\n    loader.init = true;\n    loader.onLoad.add((loader, resource) => {\n      console.log(\"Loaded :\", resource.name);\n      if (!loader.init) Command.addAssetCmd(resource.name, \"Image\");\n    });\n    var counter = 0;\n    gapi.client.drive.files.list({\n      // find the images folder in the game folder\n      'q': `parents in \"${gameId}\" and name=\"images\" and mimeType = \"application/vnd.google-apps.folder\"`\n    }).then(function (res) {\n      if (res.result.files.length === 0) {\n        console.log(\"No images folder found\");\n        callback(loader);\n        return;\n      }\n      gapi.client.drive.files.list({\n        // list the images in the image folder\n        'q': `parents in \"${res.result.files[0].id}\"`\n      }).then(function (response) {\n        if (response.result.files.length === 0) {\n          console.log(\"No images found in the images folder\");\n          callback(loader);\n          return;\n        }\n        Object.entries(response.result.files).forEach(([key, value]) => {\n          // key is the image name and value.id their id in google drive\n          gapi.client.drive.files.get({\n            fileId: value.id,\n            alt: 'media'\n          }).then(function (res) {\n            var type = res.headers[\"Content-Type\"];\n            var blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\n            const objectUrl = URL.createObjectURL(blob, type);\n            const texture = PIXI.Texture.from(objectUrl);\n            loader.add(value.name, objectUrl);\n            loader.resources[value.name] = {\n              \"texture\": texture,\n              \"fileId\": value.id\n            };\n            counter++;\n            if (counter === response.result.files.length) {\n              loader.onComplete.once(() => {\n                callback();\n              });\n              loader.load();\n            }\n          });\n        });\n      });\n    });\n  }\n  loadSounds(gameId, playList, callback) {\n    var counter = 0;\n    gapi.client.drive.files.list({\n      // find the sound folder in the game folder\n      'q': `parents in \"${gameId}\" and name=\"sounds\" and mimeType = \"application/vnd.google-apps.folder\"`\n    }).then(function (res) {\n      if (res.result.files.length === 0) {\n        console.log(\"No sounds folder found\");\n        callback(playList);\n        return;\n      }\n      gapi.client.drive.files.list({\n        // list the images in the image folder\n        'q': `parents in \"${res.result.files[0].id}\"`\n      }).then(function (response) {\n        if (response.result.files.length === 0) {\n          console.log(\"No sounds found in the sounds folder\");\n          callback(playList);\n          return;\n        }\n        Object.entries(response.result.files).forEach(([key, value]) => {\n          gapi.client.drive.files.get({\n            fileId: value.id,\n            alt: 'media'\n          }).then(function (res) {\n            var type = res.headers[\"Content-Type\"];\n            var blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\n            var objectUrl = URL.createObjectURL(blob, type);\n            playList[value.name] = new Howl({\n              src: [objectUrl],\n              format: type.split(\"/\")[1],\n              onload: function () {\n                counter++;\n                console.log(\"Loaded : \" + value.name);\n                if (counter == response.result.files.length) {\n                  callback(playList);\n                }\n              }\n            });\n          });\n        });\n      });\n    });\n  }\n  static save(gameID, gameName, json) {\n    gapi.client.drive.files.list({\n      'q': `parents in \"${gameID}\" and name=\"game.json\"`\n    }).then(function (response) {\n      if (response.result.files.length > 0) {\n        var fileId = response.result.files[0].id;\n        // Modificar el nombre del directorio con json.name\n        gapi.client.request({\n          path: `/drive/v3/files/${gameID}`,\n          method: 'PATCH',\n          body: {\n            name: gameName\n          }\n        }).then(() => {\n          // Guardar el archivo json con el nuevo nombre\n          gapi.client.request({\n            path: `/upload/drive/v3/files/${fileId}`,\n            method: 'PATCH',\n            body: json\n          }).then(() => {\n            Command.takeScreenshot();\n            alert('Game saved!!!');\n          });\n        });\n      }\n    }, function (error) {\n      console.log(error);\n    });\n  }\n  static delete(fileId, assetID, fileName, type) {\n    if (type == \"Image\" || type == \"Animation\") {\n      // app.loader.resources[fileName].texture.destroy(true);\n      // delete app.loader.resources[fileName];\n      type = \"Image\";\n    }\n    gapi.client.drive.files.delete({\n      fileId: fileId\n    }).then(() => Command.removeAssetCmd(assetID, type));\n  }\n  static upload(gameId, file, type) {\n    var folder;\n    switch (type) {\n      case \"Image\":\n        folder = \"images\";\n        break;\n      case \"Animation\":\n        folder = \"images\";\n        break;\n      case \"Sound\":\n        folder = \"sounds\";\n        break;\n      case \"ScreenShoot\":\n        folder = \"\";\n        break;\n    }\n    gapi.client.drive.files.list({\n      'q': `parents in \"${gameId}\" and name=\"${folder}\"`\n    }).then(function (response) {\n      if (response.result.files.length > 0) {\n        var metadata = {\n          'name': file.name,\n          'parents': [response.result.files[0].id]\n        };\n        var boundary = '-------314159265358979323846';\n        var delimiter = \"\\r\\n--\" + boundary + \"\\r\\n\";\n        var close_delim = \"\\r\\n--\" + boundary + \"--\";\n        var reader = new FileReader();\n        reader.readAsBinaryString(file);\n        reader.onload = function (e) {\n          var contentType = file.type || 'application/octet-stream';\n          var base64Data = btoa(reader.result);\n          var multipartRequestBody = delimiter + 'Content-Type: application/json\\r\\n\\r\\n' + JSON.stringify(metadata) + delimiter + 'Content-Type: ' + contentType + '\\r\\n' + 'Content-Transfer-Encoding: base64\\r\\n' + '\\r\\n' + base64Data + close_delim;\n          gapi.client.request({\n            'path': '/upload/drive/v3/files',\n            'method': 'POST',\n            'params': {\n              'uploadType': 'multipart'\n            },\n            'headers': {\n              'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"'\n            },\n            'body': multipartRequestBody\n          }).then(function (response) {\n            gapi.client.drive.files.get({\n              // download from drive \n              fileId: response.result.id,\n              alt: 'media'\n            }).then(function (res) {\n              var contentType = res.headers[\"Content-Type\"];\n              var blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\n              const objectUrl = URL.createObjectURL(blob, contentType);\n              if (type == \"Image\" || type == \"Animation\") {\n                //     const texture = PIXI.Texture.from(objectUrl);\n                //     while (app.loader.loading) { };\n                //     app.loader.add(file.name, objectUrl);\n                //     app.loader.resources[file.name] = { \"texture\": texture, \"fileId\": response.result.id };\n                //     app.loader.init = false;\n                //     app.loader.load();\n              } else if (type == \"Sound\") {\n                // app.playList[file.name] = new Howl({\n                //     src: [objectUrl],\n                //     format: contentType.split(\"/\")[1],\n                //     onload: function () {\n                //         console.log(\"Loaded : \" + file.name);\n                //         Command.addAssetCmd(file.name, \"Sound\");\n                //     }\n                // });\n              }\n            });\n          });\n        };\n      }\n    });\n  }\n  static uploadScreenShoot(gameId, blob) {\n    gapi.client.drive.files.list({\n      'q': `parents in \"${gameId}\" and name=\"image.jpg\"`\n    }).then(function (response) {\n      if (response.result.files.length > 0) {\n        var fileId = response.result.files[0].id;\n        var metadata = {\n          \"name\": \"image.jpg\",\n          'mimeType': 'image/jpg',\n          'parents': gameId\n        };\n        var boundary = '-------314159265358979323846';\n        var delimiter = \"\\r\\n--\" + boundary + \"\\r\\n\";\n        var close_delim = \"\\r\\n--\" + boundary + \"--\";\n        var reader = new FileReader();\n        reader.readAsBinaryString(blob);\n        reader.onload = function () {\n          var contentType = blob.type;\n          var base64Data = btoa(reader.result);\n          var multipartRequestBody = delimiter + 'Content-Type: application/json\\r\\n\\r\\n' + JSON.stringify(metadata) + delimiter + 'Content-Type: ' + contentType + '\\r\\n' + 'Content-Transfer-Encoding: base64\\r\\n' + '\\r\\n' + base64Data + close_delim;\n          gapi.client.request({\n            'path': '/upload/drive/v3/files/' + fileId,\n            'method': 'PATCH',\n            'params': {\n              'uploadType': 'multipart'\n            },\n            'headers': {\n              'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"'\n            },\n            'body': multipartRequestBody\n          }).then(function (response) {\n            console.log(\"Screenshoot updated\");\n          });\n        };\n      }\n    });\n  }\n}\nexport default File;","map":{"version":3,"names":["Command","PIXI","Howl","File","loadJson","gameId","callback","gapi","client","drive","files","list","then","res","result","length","get","fileId","id","alt","json","body","JSON","parse","loadImages","loader","init","onLoad","add","resource","console","log","name","addAssetCmd","counter","response","Object","entries","forEach","key","value","type","headers","blob","Blob","Uint8Array","map","_","i","charCodeAt","objectUrl","URL","createObjectURL","texture","Texture","from","resources","onComplete","once","load","loadSounds","playList","src","format","split","onload","save","gameID","gameName","request","path","method","takeScreenshot","alert","error","delete","assetID","fileName","removeAssetCmd","upload","file","folder","metadata","boundary","delimiter","close_delim","reader","FileReader","readAsBinaryString","e","contentType","base64Data","btoa","multipartRequestBody","stringify","uploadScreenShoot"],"sources":["D:/xampp/htdocs/app/src/pages/core/File.js"],"sourcesContent":["/* global gapi, google  */\r\nimport Command from '../editor/commands/ommand';\r\nimport PIXI from 'https://pixijs.download/v6.1.3/pixi.min.js';\r\nimport Howl from '../engine/libraries/howler.min.js';\r\n\r\nclass File {\r\n\r\n    loadJson(gameId, callback) {\r\n        gapi.client.drive.files.list({\r\n            'q': `parents in \"${gameId}\" and name=\"game.json\" and trashed=false` // Agregar \"and trashed=false\" al query\r\n        }).then(function (res) {\r\n            if (res.result.files.length > 0) {\r\n                gapi.client.drive.files.get({\r\n                    fileId: res.result.files[0].id,\r\n                    alt: 'media'\r\n                }).then(function (res) {\r\n                    var json;\r\n                    if (res.body === \"\") json = JSON.parse(\"{}\")\r\n                    else json = JSON.parse(res.body);\r\n                    callback(json);\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    loadImages(gameId, loader, callback) {\r\n        loader.init = true;\r\n        loader.onLoad.add((loader, resource) => {\r\n            console.log(\"Loaded :\", resource.name);\r\n            if (!loader.init) Command.addAssetCmd(resource.name, \"Image\");\r\n        });\r\n        var counter = 0;\r\n        gapi.client.drive.files.list({ // find the images folder in the game folder\r\n            'q': `parents in \"${gameId}\" and name=\"images\" and mimeType = \"application/vnd.google-apps.folder\"`\r\n        }).then(function (res) {\r\n            if (res.result.files.length === 0) {\r\n                console.log(\"No images folder found\");\r\n                callback(loader);\r\n                return;\r\n            }\r\n            gapi.client.drive.files.list({ // list the images in the image folder\r\n                'q': `parents in \"${res.result.files[0].id}\"`,\r\n            }).then(function (response) {\r\n                if (response.result.files.length === 0) {\r\n                    console.log(\"No images found in the images folder\");\r\n                    callback(loader);\r\n                    return;\r\n                }\r\n                Object.entries(response.result.files).forEach(([key, value]) => { // key is the image name and value.id their id in google drive\r\n                    gapi.client.drive.files.get({\r\n                        fileId: value.id,\r\n                        alt: 'media'\r\n                    }).then(function (res) {\r\n                        var type = res.headers[\"Content-Type\"];\r\n                        var blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\r\n                        const objectUrl = URL.createObjectURL(blob, type);\r\n                        const texture = PIXI.Texture.from(objectUrl);\r\n                        loader.add(value.name, objectUrl);\r\n                        loader.resources[value.name] = { \"texture\": texture, \"fileId\": value.id };\r\n                        counter++;\r\n                        if (counter === response.result.files.length) {\r\n                            loader.onComplete.once(() => { callback() });\r\n                            loader.load();\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    loadSounds(gameId, playList, callback) {\r\n        var counter = 0;\r\n        gapi.client.drive.files.list({ // find the sound folder in the game folder\r\n            'q': `parents in \"${gameId}\" and name=\"sounds\" and mimeType = \"application/vnd.google-apps.folder\"`\r\n        }).then(function (res) {\r\n            if (res.result.files.length === 0) {\r\n                console.log(\"No sounds folder found\");\r\n                callback(playList);\r\n                return;\r\n            }\r\n            gapi.client.drive.files.list({ // list the images in the image folder\r\n                'q': `parents in \"${res.result.files[0].id}\"`,\r\n            }).then(function (response) {\r\n                if (response.result.files.length === 0) {\r\n                    console.log(\"No sounds found in the sounds folder\");\r\n                    callback(playList);\r\n                    return;\r\n                }\r\n                Object.entries(response.result.files).forEach(([key, value]) => {\r\n                    gapi.client.drive.files.get({\r\n                        fileId: value.id,\r\n                        alt: 'media'\r\n                    }).then(function (res) {\r\n                        var type = res.headers[\"Content-Type\"];\r\n                        var blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\r\n                        var objectUrl = URL.createObjectURL(blob, type);\r\n                        playList[value.name] = new Howl({\r\n                            src: [objectUrl],\r\n                            format: type.split(\"/\")[1],\r\n                            onload: function () {\r\n                                counter++;\r\n                                console.log(\"Loaded : \" + value.name);\r\n                                if (counter == response.result.files.length) { callback(playList) }\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            })\r\n        })\r\n    }\r\n\r\n    static save(gameID, gameName, json) {\r\n        gapi.client.drive.files.list({\r\n            'q': `parents in \"${gameID}\" and name=\"game.json\"`\r\n        }).then(function (response) {\r\n            if (response.result.files.length > 0) {\r\n                var fileId = response.result.files[0].id;\r\n                // Modificar el nombre del directorio con json.name\r\n                gapi.client.request({\r\n                    path: `/drive/v3/files/${gameID}`,\r\n                    method: 'PATCH',\r\n                    body: {\r\n                        name: gameName\r\n                    }\r\n                }).then(() => {\r\n                    // Guardar el archivo json con el nuevo nombre\r\n                    gapi.client.request({\r\n                        path: `/upload/drive/v3/files/${fileId}`,\r\n                        method: 'PATCH',\r\n                        body: json\r\n                    }).then(() => {\r\n                        Command.takeScreenshot();\r\n                        alert('Game saved!!!');\r\n                    });\r\n                });\r\n            }\r\n        }, function (error) {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n\r\n    static delete(fileId, assetID, fileName, type) {\r\n        if (type == \"Image\" || type == \"Animation\") {\r\n           // app.loader.resources[fileName].texture.destroy(true);\r\n           // delete app.loader.resources[fileName];\r\n            type = \"Image\";\r\n        }\r\n        gapi.client.drive.files.delete({\r\n            fileId: fileId\r\n        }).then(() => Command.removeAssetCmd(assetID, type))\r\n    }\r\n\r\n    static upload(gameId, file, type) {\r\n        var folder;\r\n        switch (type) {\r\n            case \"Image\": folder = \"images\"; break;\r\n            case \"Animation\": folder = \"images\"; break;\r\n            case \"Sound\": folder = \"sounds\"; break;\r\n            case \"ScreenShoot\": folder = \"\"; break;\r\n        }\r\n        gapi.client.drive.files.list({\r\n            'q': `parents in \"${gameId}\" and name=\"${folder}\"`\r\n        }).then(function (response) {\r\n            if (response.result.files.length > 0) {\r\n                var metadata = {\r\n                    'name': file.name,\r\n                    'parents': [response.result.files[0].id]\r\n                };\r\n                var boundary = '-------314159265358979323846';\r\n                var delimiter = \"\\r\\n--\" + boundary + \"\\r\\n\";\r\n                var close_delim = \"\\r\\n--\" + boundary + \"--\";\r\n\r\n                var reader = new FileReader();\r\n                reader.readAsBinaryString(file);\r\n                reader.onload = function (e) {\r\n                    var contentType = file.type || 'application/octet-stream';\r\n                    var base64Data = btoa(reader.result);\r\n                    var multipartRequestBody =\r\n                        delimiter + 'Content-Type: application/json\\r\\n\\r\\n' + JSON.stringify(metadata) +\r\n                        delimiter + 'Content-Type: ' + contentType + '\\r\\n' + 'Content-Transfer-Encoding: base64\\r\\n' +\r\n                        '\\r\\n' + base64Data + close_delim;\r\n\r\n                    gapi.client.request({\r\n                        'path': '/upload/drive/v3/files',\r\n                        'method': 'POST',\r\n                        'params': { 'uploadType': 'multipart' },\r\n                        'headers': { 'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"', },\r\n                        'body': multipartRequestBody\r\n                    }).then(function (response) {\r\n                        gapi.client.drive.files.get({ // download from drive \r\n                            fileId: response.result.id,\r\n                            alt: 'media'\r\n                        }).then(function (res) {\r\n                            var contentType = res.headers[\"Content-Type\"];\r\n                            var blob = new Blob([new Uint8Array(res.body.length).map((_, i) => res.body.charCodeAt(i))]);\r\n                            const objectUrl = URL.createObjectURL(blob, contentType);\r\n                            if (type == \"Image\" || type == \"Animation\") {\r\n                            //     const texture = PIXI.Texture.from(objectUrl);\r\n                            //     while (app.loader.loading) { };\r\n                            //     app.loader.add(file.name, objectUrl);\r\n                            //     app.loader.resources[file.name] = { \"texture\": texture, \"fileId\": response.result.id };\r\n                            //     app.loader.init = false;\r\n                            //     app.loader.load();\r\n                             }\r\n                            else if (type == \"Sound\") {\r\n                                // app.playList[file.name] = new Howl({\r\n                                //     src: [objectUrl],\r\n                                //     format: contentType.split(\"/\")[1],\r\n                                //     onload: function () {\r\n                                //         console.log(\"Loaded : \" + file.name);\r\n                                //         Command.addAssetCmd(file.name, \"Sound\");\r\n                                //     }\r\n                                // });\r\n                            }\r\n                        });\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    static uploadScreenShoot(gameId, blob) {\r\n        gapi.client.drive.files.list({\r\n            'q': `parents in \"${gameId}\" and name=\"image.jpg\"`\r\n        }).then(function (response) {\r\n            if (response.result.files.length > 0) {\r\n                var fileId = response.result.files[0].id;\r\n                var metadata = {\r\n                    \"name\": \"image.jpg\",\r\n                    'mimeType': 'image/jpg',\r\n                    'parents': gameId\r\n                };\r\n                var boundary = '-------314159265358979323846';\r\n                var delimiter = \"\\r\\n--\" + boundary + \"\\r\\n\";\r\n                var close_delim = \"\\r\\n--\" + boundary + \"--\";\r\n\r\n                var reader = new FileReader();\r\n                reader.readAsBinaryString(blob);\r\n                reader.onload = function () {\r\n                    var contentType = blob.type;\r\n                    var base64Data = btoa(reader.result);\r\n                    var multipartRequestBody =\r\n                        delimiter + 'Content-Type: application/json\\r\\n\\r\\n' + JSON.stringify(metadata) +\r\n                        delimiter + 'Content-Type: ' + contentType + '\\r\\n' + 'Content-Transfer-Encoding: base64\\r\\n' +\r\n                        '\\r\\n' + base64Data + close_delim;\r\n\r\n                    gapi.client.request({\r\n                        'path': '/upload/drive/v3/files/' + fileId,\r\n                        'method': 'PATCH',\r\n                        'params': { 'uploadType': 'multipart' },\r\n                        'headers': { 'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"' },\r\n                        'body': multipartRequestBody\r\n                    }).then(function (response) {\r\n                        console.log(\"Screenshoot updated\");\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default File;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}