{"ast":null,"code":"import { LoaderParserPriority, copySearchParams } from \"@pixi/assets\";\nimport { utils, ExtensionType, settings, extensions } from \"@pixi/core\";\nimport { Spritesheet } from \"./Spritesheet.mjs\";\nconst validImages = [\"jpg\", \"png\", \"jpeg\", \"avif\", \"webp\"];\nfunction getCacheableAssets(keys, asset, ignoreMultiPack) {\n  const out = {};\n  if (keys.forEach(key => {\n    out[key] = asset;\n  }), Object.keys(asset.textures).forEach(key => {\n    out[key] = asset.textures[key];\n  }), !ignoreMultiPack) {\n    const basePath = utils.path.dirname(keys[0]);\n    asset.linkedSheets.forEach((item, i) => {\n      const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, !0);\n      Object.assign(out, out2);\n    });\n  }\n  return out;\n}\nconst spritesheetAsset = {\n  extension: ExtensionType.Asset,\n  /** Handle the caching of the related Spritesheet Textures */\n  cache: {\n    test: asset => asset instanceof Spritesheet,\n    getCacheableAssets: (keys, asset) => getCacheableAssets(keys, asset, !1)\n  },\n  /** Resolve the the resolution of the asset. */\n  resolver: {\n    test: value => {\n      const split = value.split(\"?\")[0].split(\".\"),\n        extension = split.pop(),\n        format = split.pop();\n      return extension === \"json\" && validImages.includes(format);\n    },\n    parse: value => {\n      const split = value.split(\".\");\n      return {\n        resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n        format: split[split.length - 2],\n        src: value\n      };\n    }\n  },\n  /**\n   * Loader plugin that parses sprite sheets!\n   * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n   * If it is, we load the spritesheets image and parse the data into PIXI.Spritesheet\n   * All textures in the sprite sheet are then added to the cache\n   * @ignore\n   */\n  loader: {\n    name: \"spritesheetLoader\",\n    extension: {\n      type: ExtensionType.LoadParser,\n      priority: LoaderParserPriority.Normal\n    },\n    async testParse(asset, options) {\n      return utils.path.extname(options.src).toLowerCase() === \".json\" && !!asset.frames;\n    },\n    async parse(asset, options, loader) {\n      let basePath = utils.path.dirname(options.src);\n      basePath && basePath.lastIndexOf(\"/\") !== basePath.length - 1 && (basePath += \"/\");\n      let imagePath = basePath + asset.meta.image;\n      imagePath = copySearchParams(imagePath, options.src);\n      const texture = (await loader.load([imagePath]))[imagePath],\n        spritesheet = new Spritesheet(texture.baseTexture, asset, options.src);\n      await spritesheet.parse();\n      const multiPacks = asset?.meta?.related_multi_packs;\n      if (Array.isArray(multiPacks)) {\n        const promises = [];\n        for (const item of multiPacks) {\n          if (typeof item != \"string\") continue;\n          let itemUrl = basePath + item;\n          options.data?.ignoreMultiPack || (itemUrl = copySearchParams(itemUrl, options.src), promises.push(loader.load({\n            src: itemUrl,\n            data: {\n              ignoreMultiPack: !0\n            }\n          })));\n        }\n        const res = await Promise.all(promises);\n        spritesheet.linkedSheets = res, res.forEach(item => {\n          item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter(sp => sp !== item));\n        });\n      }\n      return spritesheet;\n    },\n    unload(spritesheet) {\n      spritesheet.destroy(!0);\n    }\n  }\n};\nextensions.add(spritesheetAsset);\nexport { spritesheetAsset };","map":{"version":3,"names":["validImages","getCacheableAssets","keys","asset","ignoreMultiPack","out","forEach","key","Object","textures","basePath","utils","path","dirname","linkedSheets","item","i","out2","data","meta","related_multi_packs","assign","spritesheetAsset","extension","ExtensionType","Asset","cache","test","Spritesheet","resolver","value","split","pop","format","includes","parse","resolution","parseFloat","settings","RETINA_PREFIX","exec","length","src","loader","name","type","LoadParser","priority","LoaderParserPriority","Normal","testParse","options","extname","toLowerCase","frames","lastIndexOf","imagePath","image","copySearchParams","texture","load","spritesheet","baseTexture","multiPacks","Array","isArray","promises","itemUrl","push","res","Promise","all","concat","filter","sp","unload","destroy","extensions","add"],"sources":["D:\\xampp\\htdocs\\app\\node_modules\\@pixi\\spritesheet\\src\\spritesheetAsset.ts"],"sourcesContent":["import { copySearchParams, LoaderParserPriority } from '@pixi/assets';\nimport { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { Spritesheet } from './Spritesheet';\n\nimport type { AssetExtension, Loader, ResolvedAsset, UnresolvedAsset } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport type { ISpritesheetData } from './Spritesheet';\n\nexport interface SpriteSheetJson extends ISpritesheetData\n{\n    meta: {\n        image: string;\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\nconst validImages = ['jpg', 'png', 'jpeg', 'avif', 'webp'];\n\nfunction getCacheableAssets(keys: string[], asset: Spritesheet, ignoreMultiPack: boolean)\n{\n    const out: Record<string, any> = {};\n\n    keys.forEach((key: string) =>\n    {\n        out[key] = asset;\n    });\n\n    Object.keys(asset.textures).forEach((key) =>\n    {\n        out[key] = asset.textures[key];\n    });\n\n    if (!ignoreMultiPack)\n    {\n        const basePath = utils.path.dirname(keys[0]);\n\n        asset.linkedSheets.forEach((item: Spritesheet, i) =>\n        {\n            const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n\n            Object.assign(out, out2);\n        });\n    }\n\n    return out;\n}\n\n/**\n * Asset extension for loading spritesheets.\n * @memberof PIXI\n * @type {PIXI.AssetExtension}\n */\nexport const spritesheetAsset = {\n    extension: ExtensionType.Asset,\n    /** Handle the caching of the related Spritesheet Textures */\n    cache: {\n        test: (asset: Spritesheet) => asset instanceof Spritesheet,\n        getCacheableAssets: (keys: string[], asset: Spritesheet) => getCacheableAssets(keys, asset, false),\n    },\n    /** Resolve the the resolution of the asset. */\n    resolver: {\n        test: (value: string): boolean =>\n        {\n            const tempURL = value.split('?')[0];\n            const split = tempURL.split('.');\n            const extension = split.pop();\n            const format = split.pop();\n\n            return extension === 'json' && validImages.includes(format);\n        },\n        parse: (value: string): UnresolvedAsset =>\n        {\n            const split = value.split('.');\n\n            return {\n                resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                format: split[split.length - 2],\n                src: value,\n            };\n        },\n    },\n    /**\n     * Loader plugin that parses sprite sheets!\n     * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n     * If it is, we load the spritesheets image and parse the data into PIXI.Spritesheet\n     * All textures in the sprite sheet are then added to the cache\n     * @ignore\n     */\n    loader: {\n        name: 'spritesheetLoader',\n\n        extension: {\n            type: ExtensionType.LoadParser,\n            priority: LoaderParserPriority.Normal,\n        },\n\n        async testParse(asset: SpriteSheetJson, options: ResolvedAsset): Promise<boolean>\n        {\n            return (utils.path.extname(options.src).toLowerCase() === '.json' && !!asset.frames);\n        },\n\n        async parse(asset: SpriteSheetJson, options: ResolvedAsset, loader: Loader): Promise<Spritesheet>\n        {\n            let basePath = utils.path.dirname(options.src);\n\n            if (basePath && basePath.lastIndexOf('/') !== (basePath.length - 1))\n            {\n                basePath += '/';\n            }\n\n            let imagePath = basePath + asset.meta.image;\n\n            imagePath = copySearchParams(imagePath, options.src);\n\n            const assets = await loader.load<Texture>([imagePath]);\n            const texture = assets[imagePath];\n            const spritesheet = new Spritesheet(\n                texture.baseTexture,\n                asset,\n                options.src,\n            );\n\n            await spritesheet.parse();\n\n            // Check and add the multi atlas\n            // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n            // eslint-disable-next-line camelcase\n            const multiPacks = asset?.meta?.related_multi_packs;\n\n            if (Array.isArray(multiPacks))\n            {\n                const promises: Promise<Spritesheet<SpriteSheetJson>>[] = [];\n\n                for (const item of multiPacks)\n                {\n                    if (typeof item !== 'string')\n                    {\n                        continue;\n                    }\n\n                    let itemUrl = basePath + item;\n\n                    // Check if the file wasn't already added as multipack\n                    if (options.data?.ignoreMultiPack)\n                    {\n                        continue;\n                    }\n\n                    itemUrl = copySearchParams(itemUrl, options.src);\n\n                    promises.push(loader.load<Spritesheet<SpriteSheetJson>>({\n                        src: itemUrl,\n                        data: {\n                            ignoreMultiPack: true,\n                        }\n                    }));\n                }\n\n                const res = await Promise.all(promises);\n\n                spritesheet.linkedSheets = res;\n                res.forEach((item) =>\n                {\n                    item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => (sp !== item)));\n                });\n            }\n\n            return spritesheet;\n        },\n\n        unload(spritesheet: Spritesheet)\n        {\n            spritesheet.destroy(true);\n        },\n    },\n} as AssetExtension<Spritesheet | SpriteSheetJson>;\n\nextensions.add(spritesheetAsset);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}