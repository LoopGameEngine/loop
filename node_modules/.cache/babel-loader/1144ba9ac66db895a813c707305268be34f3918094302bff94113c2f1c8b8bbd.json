{"ast":null,"code":"// /apis/driverAPI.js\n/* global gapi */\n\nasync function folderExists(folderName, token) {\n  try {\n    const response = await gapi.client.drive.files.list({\n      q: `name='${folderName}' and trashed=false`,\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    });\n    if (response.result.files && response.result.files.length > 0) {\n      return response.result.files[0].id;\n    } else {\n      return undefined;\n    }\n  } catch (error) {\n    console.error('Error checking folder existence:', error.message);\n    throw error;\n  }\n}\nasync function createFolder(folderName, parent, token) {\n  try {\n    const response = await gapi.client.request({\n      path: '/drive/v3/files',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token ? `Bearer ${token}` : ''\n      },\n      body: JSON.stringify({\n        'name': folderName,\n        'mimeType': 'application/vnd.google-apps.folder',\n        'parents': [parent]\n      })\n    }).then(response => response.result);\n    if (response && response.id) {\n      return response.id;\n    } else {\n      throw new Error('Failed to create folder: No ID returned');\n    }\n  } catch (error) {\n    console.error('Error creating folder:', error.message || error);\n    throw error;\n  }\n}\nasync function listDriveGames(appFolderID, token) {\n  if (!appFolderID) {\n    return []; // No hay carpeta de aplicaciones, por lo que no hay juegos que listar\n  }\n\n  const files = [];\n  let pageToken = null;\n  do {\n    try {\n      const response = await gapi.client.drive.files.list({\n        q: `parents in \"${appFolderID}\"`,\n        fields: 'nextPageToken, files(id, name)',\n        headers: token ? {\n          Authorization: `Bearer ${token}`\n        } : {},\n        pageToken: pageToken\n      });\n      const gameFiles = response.result.files;\n      for (const file of gameFiles) {\n        file.imageUrl = await getImageDownloadUrl(file.id); // Aquí se asume que getImageDownloadUrl es también async\n      }\n\n      files.push(...gameFiles);\n      pageToken = response.result.nextPageToken;\n    } catch (error) {\n      console.error('Error listing Google Drive games:', error.message);\n      throw error; // Interrumpe el bucle y propaga el error\n    }\n  } while (pageToken);\n  return files;\n}\nasync function getImageDownloadUrl(gameFolderID) {\n  try {\n    const listResponse = await gapi.client.drive.files.list({\n      'q': `name='image.jpg' and '${gameFolderID}' in parents`,\n      'fields': 'files(id)'\n    });\n    if (!listResponse.result.files || listResponse.result.files.length === 0) {\n      throw new Error('No se encontró el archivo de imagen en el directorio del juego.');\n    }\n    const imageFileId = listResponse.result.files[0].id;\n    const getResponse = await gapi.client.drive.files.get({\n      'fileId': imageFileId,\n      'alt': 'media'\n    });\n    const type = \"image/jpeg\";\n    const blob = new Blob([new Uint8Array(getResponse.body.length).map((_, i) => getResponse.body.charCodeAt(i))], {\n      type: type\n    });\n    const objectUrl = URL.createObjectURL(blob);\n    return objectUrl;\n  } catch (error) {\n    console.error('Error obteniendo la URL de descarga de la imagen:', error.message);\n    throw error;\n  }\n}\nasync function newGame(appFolderID, token) {\n  try {\n    const folderId = await createFolder(\"Untitled Game\", appFolderID, token);\n    await createFolder(\"images\", folderId, token);\n    await createFolder(\"sounds\", folderId, token);\n    await createEmptyJson(folderId, token);\n    await createEmptyImage(folderId, token);\n    const gameData = {\n      id: folderId,\n      name: \"Untitled Game\",\n      imageUrl: \"\"\n    };\n    return gameData;\n  } catch (error) {\n    console.error(\"Failed to create game:\", error);\n    throw error;\n  }\n}\nasync function duplicateGame(gameID) {\n  try {\n    await copyDirectory(gameID);\n    console.log('Game duplication completed. New Game ID:');\n  } catch (error) {\n    console.error('Error during game duplication:', error.message);\n    throw error;\n  }\n}\nasync function deleteGame(gameID, gameName) {\n  var result = window.confirm(`Do you want to delete the \"${gameName}\" game?`);\n  if (result) {\n    try {\n      await gapi.client.drive.files.delete({\n        'fileId': gameID\n      });\n    } catch (error) {\n      console.error('Error deleting game:', error.message);\n    }\n  } else {\n    console.log('Option selected: false');\n  }\n}\nasync function copyDirectory(sourceDirectoryID, parentDirectoryID = null) {\n  try {\n    const sourceDirInfo = await gapi.client.drive.files.get({\n      fileId: sourceDirectoryID,\n      fields: 'name, parents'\n    });\n    let newDirName = !parentDirectoryID ? `${sourceDirInfo.result.name} - Copy` : sourceDirInfo.result.name;\n    const newDirRes = await gapi.client.drive.files.create({\n      resource: {\n        name: newDirName,\n        mimeType: 'application/vnd.google-apps.folder',\n        parents: [parentDirectoryID || sourceDirInfo.result.parents[0]]\n      }\n    });\n    const newDirectoryID = newDirRes.result.id;\n    console.log(`Directory created: ${newDirName}`);\n    await copyContents(sourceDirectoryID, newDirectoryID, newDirName);\n  } catch (error) {\n    console.error('Error during directory copy:', error.message);\n    throw error;\n  }\n}\nasync function copyContents(sourceDirectoryID, newDirectoryID, newDirName) {\n  const files = await gapi.client.drive.files.list({\n    q: `'${sourceDirectoryID}' in parents`,\n    fields: 'files(id, name, mimeType)'\n  });\n  for (const file of files.result.files) {\n    if (file.mimeType === 'application/vnd.google-apps.folder') {\n      await copyDirectory(file.id, newDirectoryID);\n    } else {\n      const copyRes = await gapi.client.drive.files.copy({\n        fileId: file.id,\n        parents: [newDirectoryID]\n      });\n      console.log(`File copied: ${file.name}`);\n      if (file.name === \"game.json\") {\n        // Caso especial para modificar \"game.json\".\n        await changeNameInJson(copyRes.result.id, newDirName);\n      }\n    }\n  }\n}\nasync function changeNameInJson(fileId, newName) {\n  try {\n    const res = await gapi.client.drive.files.get({\n      fileId: fileId,\n      alt: 'media'\n    });\n    let gameJsonContent;\n    if (res.body) gameJsonContent = JSON.parse(res.body);else throw new Error('game.json content could not be retrieved.');\n    gameJsonContent.name = newName; // Asume que 'name' es la propiedad a cambiar.\n    const updatedJsonString = JSON.stringify(gameJsonContent);\n    await gapi.client.request({\n      path: `/upload/drive/v3/files/${fileId}`,\n      method: 'PATCH',\n      params: {\n        uploadType: 'media'\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: updatedJsonString\n    });\n    console.log('game.json updated with new name:', newName);\n  } catch (error) {\n    console.error('Error updating game.json:', error.message);\n    throw error;\n  }\n}\nasync function createEmptyJson(gameID, token) {\n  try {\n    // Ajusta la llamada para usar el método específico de la API de Google Drive\n    // y para incluir el token de autorización en el cliente de gapi configurado globalmente.\n    const response = await gapi.client.drive.files.create({\n      resource: {\n        name: 'game.json',\n        mimeType: 'application/json',\n        parents: [gameID]\n      },\n      fields: 'id'\n    });\n\n    // Verifica la respuesta\n    if (response && response.result && response.result.id) {\n      return response.result.id;\n    } else {\n      throw new Error('Failed to create JSON file: No ID returned.');\n    }\n  } catch (error) {\n    console.error('Failed to create JSON file:', error.message || error);\n    throw error;\n  }\n}\nasync function createEmptyImage(gameID, token) {\n  return new Promise(function (resolve, reject) {\n    var metadata = {\n      'name': 'image.jpg',\n      'parents': [gameID]\n    };\n    // Create a blank image of 1x1 pixels\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    var context = canvas.getContext('2d');\n    context.fillStyle = '#ffffff'; // White color\n    context.fillRect(0, 0, 1, 1);\n    canvas.toBlob(function (blob) {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        var base64Data = reader.result.split(',')[1];\n        var boundary = '-------314159265358979323846';\n        var delimiter = '\\r\\n--' + boundary + '\\r\\n';\n        var close_delim = '\\r\\n--' + boundary + '--';\n        var multipartRequestBody = delimiter + 'Content-Type: application/json\\r\\n\\r\\n' + JSON.stringify(metadata) + delimiter + 'Content-Type: image/jpeg\\r\\n' + 'Content-Transfer-Encoding: base64\\r\\n' + '\\r\\n' + base64Data + close_delim;\n        gapi.client.request({\n          path: '/upload/drive/v3/files',\n          method: 'POST',\n          params: {\n            'uploadType': 'multipart'\n          },\n          headers: {\n            'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"',\n            'Authorization': 'Bearer ' + token\n          },\n          body: multipartRequestBody\n        }).then(function (response) {\n          var fileId = response.result.id;\n          resolve(fileId);\n        }).catch(function (error) {\n          reject(new Error('Failed to create image file: ' + error.result.error.message));\n        });\n      };\n      reader.readAsDataURL(blob);\n    }, 'image/jpeg');\n  });\n}\nexport { folderExists, createFolder, listDriveGames, getImageDownloadUrl, newGame, deleteGame, duplicateGame };","map":{"version":3,"names":["folderExists","folderName","token","response","gapi","client","drive","files","list","q","headers","Authorization","result","length","id","undefined","error","console","message","createFolder","parent","request","path","method","body","JSON","stringify","then","Error","listDriveGames","appFolderID","pageToken","fields","gameFiles","file","imageUrl","getImageDownloadUrl","push","nextPageToken","gameFolderID","listResponse","imageFileId","getResponse","get","type","blob","Blob","Uint8Array","map","_","i","charCodeAt","objectUrl","URL","createObjectURL","newGame","folderId","createEmptyJson","createEmptyImage","gameData","name","duplicateGame","gameID","copyDirectory","log","deleteGame","gameName","window","confirm","delete","sourceDirectoryID","parentDirectoryID","sourceDirInfo","fileId","newDirName","newDirRes","create","resource","mimeType","parents","newDirectoryID","copyContents","copyRes","copy","changeNameInJson","newName","res","alt","gameJsonContent","parse","updatedJsonString","params","uploadType","Promise","resolve","reject","metadata","canvas","document","createElement","width","height","context","getContext","fillStyle","fillRect","toBlob","reader","FileReader","onloadend","base64Data","split","boundary","delimiter","close_delim","multipartRequestBody","catch","readAsDataURL"],"sources":["D:/xampp/htdocs/src/apis/driveAPI.js"],"sourcesContent":["\r\n// /apis/driverAPI.js\r\n/* global gapi */\r\n\r\nasync function folderExists(folderName, token) {\r\n  try {\r\n    const response = await gapi.client.drive.files.list({\r\n      q: `name='${folderName}' and trashed=false`,\r\n      headers: token ? { Authorization: `Bearer ${token}` } : {}\r\n    });\r\n    if (response.result.files && response.result.files.length > 0) {\r\n      return response.result.files[0].id;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error checking folder existence:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function createFolder(folderName, parent, token) {\r\n  try {\r\n    const response = await gapi.client.request({\r\n      path: '/drive/v3/files',\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': token ? `Bearer ${token}` : '',\r\n      },\r\n      body: JSON.stringify({\r\n        'name': folderName,\r\n        'mimeType': 'application/vnd.google-apps.folder',\r\n        'parents': [parent],\r\n      })\r\n    }).then(response => response.result);\r\n    if (response && response.id) {\r\n      return response.id;\r\n    } else {\r\n      throw new Error('Failed to create folder: No ID returned');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating folder:', error.message || error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function listDriveGames(appFolderID, token) {\r\n  if (!appFolderID) {\r\n    return []; // No hay carpeta de aplicaciones, por lo que no hay juegos que listar\r\n  }\r\n  const files = [];\r\n  let pageToken = null;\r\n  do {\r\n    try {\r\n      const response = await gapi.client.drive.files.list({\r\n        q: `parents in \"${appFolderID}\"`,\r\n        fields: 'nextPageToken, files(id, name)',\r\n        headers: token ? { Authorization: `Bearer ${token}` } : {},\r\n        pageToken: pageToken,\r\n      });\r\n      const gameFiles = response.result.files;\r\n\r\n      for (const file of gameFiles) {\r\n        file.imageUrl = await getImageDownloadUrl(file.id); // Aquí se asume que getImageDownloadUrl es también async\r\n      }\r\n\r\n      files.push(...gameFiles);\r\n      pageToken = response.result.nextPageToken;\r\n    } catch (error) {\r\n      console.error('Error listing Google Drive games:', error.message);\r\n      throw error; // Interrumpe el bucle y propaga el error\r\n    }\r\n  } while (pageToken);\r\n  return files;\r\n}\r\n\r\nasync function getImageDownloadUrl(gameFolderID) {\r\n  try {\r\n    const listResponse = await gapi.client.drive.files.list({\r\n      'q': `name='image.jpg' and '${gameFolderID}' in parents`,\r\n      'fields': 'files(id)',\r\n    });\r\n    if (!listResponse.result.files || listResponse.result.files.length === 0) {\r\n      throw new Error('No se encontró el archivo de imagen en el directorio del juego.');\r\n    }\r\n    const imageFileId = listResponse.result.files[0].id;\r\n    const getResponse = await gapi.client.drive.files.get({\r\n      'fileId': imageFileId,\r\n      'alt': 'media',\r\n    });\r\n    const type = \"image/jpeg\";\r\n    const blob = new Blob([new Uint8Array(getResponse.body.length).map((_, i) => getResponse.body.charCodeAt(i))], { type: type });\r\n    const objectUrl = URL.createObjectURL(blob);\r\n    return objectUrl;\r\n  } catch (error) {\r\n    console.error('Error obteniendo la URL de descarga de la imagen:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function newGame(appFolderID, token) {\r\n  try {\r\n    const folderId = await createFolder(\"Untitled Game\", appFolderID, token);\r\n    await createFolder(\"images\", folderId, token);\r\n    await createFolder(\"sounds\", folderId, token);\r\n    await createEmptyJson(folderId, token);\r\n    await createEmptyImage(folderId, token);\r\n    const gameData = { id: folderId, name: \"Untitled Game\", imageUrl: \"\" };\r\n    return gameData;\r\n  } catch (error) {\r\n    console.error(\"Failed to create game:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function duplicateGame(gameID) {\r\n  try {\r\n    await copyDirectory(gameID);\r\n    console.log('Game duplication completed. New Game ID:');\r\n  } catch (error) {\r\n    console.error('Error during game duplication:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function deleteGame(gameID, gameName) {\r\n  var result = window.confirm(`Do you want to delete the \"${gameName}\" game?`);\r\n  if (result) {\r\n    try {\r\n      await gapi.client.drive.files.delete({\r\n        'fileId': gameID\r\n      });\r\n    } catch (error) {\r\n      console.error('Error deleting game:', error.message);\r\n    }\r\n  } else {\r\n    console.log('Option selected: false');\r\n  }\r\n}\r\n\r\nasync function copyDirectory(sourceDirectoryID, parentDirectoryID = null) {\r\n  try {\r\n    const sourceDirInfo = await gapi.client.drive.files.get({\r\n      fileId: sourceDirectoryID,\r\n      fields: 'name, parents'\r\n    });\r\n    let newDirName = !parentDirectoryID ? `${sourceDirInfo.result.name} - Copy` : sourceDirInfo.result.name;\r\n    const newDirRes = await gapi.client.drive.files.create({\r\n      resource: {\r\n        name: newDirName,\r\n        mimeType: 'application/vnd.google-apps.folder',\r\n        parents: [parentDirectoryID || sourceDirInfo.result.parents[0]]\r\n      }\r\n    });\r\n    const newDirectoryID = newDirRes.result.id;\r\n    console.log(`Directory created: ${newDirName}`);\r\n    await copyContents(sourceDirectoryID, newDirectoryID, newDirName);\r\n  } catch (error) {\r\n    console.error('Error during directory copy:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function copyContents(sourceDirectoryID, newDirectoryID, newDirName) {\r\n  const files = await gapi.client.drive.files.list({\r\n    q: `'${sourceDirectoryID}' in parents`,\r\n    fields: 'files(id, name, mimeType)'\r\n  });\r\n  for (const file of files.result.files) {\r\n    if (file.mimeType === 'application/vnd.google-apps.folder') {\r\n      await copyDirectory(file.id, newDirectoryID);\r\n    } else {\r\n      const copyRes = await gapi.client.drive.files.copy({\r\n        fileId: file.id,\r\n        parents: [newDirectoryID]\r\n      });\r\n      console.log(`File copied: ${file.name}`);\r\n      if (file.name === \"game.json\") {   // Caso especial para modificar \"game.json\".\r\n        await changeNameInJson(copyRes.result.id, newDirName);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nasync function changeNameInJson(fileId, newName) {\r\n  try {\r\n    const res = await gapi.client.drive.files.get({\r\n      fileId: fileId,\r\n      alt: 'media'\r\n    });\r\n    let gameJsonContent;\r\n    if (res.body) gameJsonContent = JSON.parse(res.body);\r\n    else throw new Error('game.json content could not be retrieved.');\r\n    gameJsonContent.name = newName; // Asume que 'name' es la propiedad a cambiar.\r\n    const updatedJsonString = JSON.stringify(gameJsonContent);\r\n    await gapi.client.request({\r\n      path: `/upload/drive/v3/files/${fileId}`,\r\n      method: 'PATCH',\r\n      params: { uploadType: 'media' },\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: updatedJsonString\r\n    });\r\n    console.log('game.json updated with new name:', newName);\r\n  } catch (error) {\r\n    console.error('Error updating game.json:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function createEmptyJson(gameID, token) {\r\n  try {\r\n    // Ajusta la llamada para usar el método específico de la API de Google Drive\r\n    // y para incluir el token de autorización en el cliente de gapi configurado globalmente.\r\n    const response = await gapi.client.drive.files.create({\r\n      resource: {\r\n        name: 'game.json',\r\n        mimeType: 'application/json',\r\n        parents: [gameID],\r\n      },\r\n      fields: 'id'\r\n    });\r\n\r\n    // Verifica la respuesta\r\n    if (response && response.result && response.result.id) {\r\n      return response.result.id;\r\n    } else {\r\n      throw new Error('Failed to create JSON file: No ID returned.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to create JSON file:', error.message || error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function createEmptyImage(gameID, token) {\r\n  return new Promise(function (resolve, reject) {\r\n    var metadata = {\r\n      'name': 'image.jpg',\r\n      'parents': [gameID]\r\n    };\r\n    // Create a blank image of 1x1 pixels\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = 1;\r\n    canvas.height = 1;\r\n    var context = canvas.getContext('2d');\r\n    context.fillStyle = '#ffffff'; // White color\r\n    context.fillRect(0, 0, 1, 1);\r\n    canvas.toBlob(function (blob) {\r\n      var reader = new FileReader();\r\n      reader.onloadend = function () {\r\n        var base64Data = reader.result.split(',')[1];\r\n\r\n        var boundary = '-------314159265358979323846';\r\n        var delimiter = '\\r\\n--' + boundary + '\\r\\n';\r\n        var close_delim = '\\r\\n--' + boundary + '--';\r\n\r\n        var multipartRequestBody =\r\n          delimiter +\r\n          'Content-Type: application/json\\r\\n\\r\\n' +\r\n          JSON.stringify(metadata) +\r\n          delimiter +\r\n          'Content-Type: image/jpeg\\r\\n' +\r\n          'Content-Transfer-Encoding: base64\\r\\n' +\r\n          '\\r\\n' +\r\n          base64Data +\r\n          close_delim;\r\n\r\n        gapi.client.request({\r\n          path: '/upload/drive/v3/files',\r\n          method: 'POST',\r\n          params: {\r\n            'uploadType': 'multipart'\r\n          },\r\n          headers: {\r\n            'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"',\r\n            'Authorization': 'Bearer ' + token\r\n          },\r\n          body: multipartRequestBody\r\n        }).then(function (response) {\r\n          var fileId = response.result.id;\r\n          resolve(fileId);\r\n        }).catch(function (error) {\r\n          reject(new Error('Failed to create image file: ' + error.result.error.message));\r\n        });\r\n      };\r\n\r\n      reader.readAsDataURL(blob);\r\n    }, 'image/jpeg');\r\n  });\r\n}\r\n\r\nexport {\r\n  folderExists,\r\n  createFolder,\r\n  listDriveGames,\r\n  getImageDownloadUrl,\r\n  newGame,\r\n  deleteGame,\r\n  duplicateGame\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}